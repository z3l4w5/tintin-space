[{"id":0,"href":"/zh/docs/part1/chapter1/","title":"Jamstack和Hugo","section":"Part1","content":"Jamstack和Hugo\n本章涵盖\n构建网站的JamStack基础知识 静态站点生成的原理 了解Hugo静态站点生成器 Hugo静态站点生成器的好处 最适合JamStack和Hugo的使用场景 如果你最近与网站建立了联系，或者有类似情况的朋友，则必须知道维护网站涉及多少工作。 它需要DevOps工程师、系统管理员和数据库架构师来保持网站在互联网上运行。 这是整个团队的全职工作，而不仅仅是个人。 内容的维护非常耗时，以至于创作者以前所未有的速度转向WordPress.com等托管托管服务，甚至将他们的内容免费提供给Medium或Facebook等平台。\nJamstack是一种web开发体系结构，通过将复杂的部分移出运行时间或将其封装到更易于管理的服务中，可以最大程度地减少维护网站的日常工作。 JamStack这个词是由Netlify的联合创始人兼首席执行官马特·比尔曼（Matt Biilmann）在2016年创造的。 Jamstack通过将所有内容存储到部署期间编译的文件中，然后通过内容分发网络 (CDN) 来放弃数据库。 应用程序编程接口(API)提供动态的、基于服务器的内容，由第三方维护或由云服务提供商托管，网站所有者只需最少的日常参与。 这样，开发人员就可以摆脱处理安全更新，拒绝服务 (DoS) 攻击以及不断监视以阻止黑客的任务。\nJamStack严重依赖于核心Web技术，如HTML、CSS和Java-Scrip。 它提供了在现代网络上快速启动和运行的能力，因此我们可以构建具有出色性能，低成本和很少维护的网站。 它可以为各种用例创建网站，如个人博客、商业网站和电子商务解决方案。 Jamstack通过提供对静态内容的全面支持，与基于服务器的框架协调工作。 然而，我们仍然可以使用传统的框架来提供用户生成的、基于服务器的内容。\nHugo是当前Jamstack框架中最受欢迎的框架之一，并提供最佳的构建速度。 它帮助我们享受Web开发，而不需要安装、维护或日常维护的烦恼。 没有等待编译、更新或部署! Hugo获取了一个模板和一个标记格式的网站，并将其转换为HTML，这样网站就可以托管了。 我祝贺你拿起这本书，并踏上了从根本上简化你的web开发方法的旅程。\n"},{"id":1,"href":"/zh/docs/part1/chapter1/summary/","title":"总结","section":"Jamstack和Hugo","content":"总结\nJamstack是一种web开发方法，其中大多数内容与主题一起作为文件存储，并在部署过程中编译到网站中。 JAMSTACK中的静态内容是用标记语言编写的，标记语言会编译成HTML。 动态片段以通过JavaScript访问的api的形式提供。 JAMSTACK架构在成本、运营和维护方面节省了大量成本。 我们还得到一个快速的网站。 Hugo是一个帮助构建这些所谓的静态网站的框架，它提供了出色的构建性能，Hugo以单一二进制文件的形式提供。 Hugo满足了低持续维护和出色的开发人员经验的承诺，并且可以扩展到一个庞大的团队。 Hugo尤其在信息流从服务器到客户端的地方大放异彩，例如个人或公司网站、新闻帖子、博客、文档等。 对于信息流从客户端到服务器或基于用户的人化的地方，Hugo遵循Jamstack方法。 JavaScript层负责通过API与服务器进行通信。 "},{"id":2,"href":"/zh/docs/part1/","title":"Part1","section":"Docs","content":"\rUbi loqui\r#\rMentem genus facietque salire tempus bracchia\r#\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\rPlacabilis coactis nega ingemuit ignoscat nimia non\r#\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\rCaesorum illa tu sentit micat vestes papyriferi\r#\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":3,"href":"/zh/docs/part1/chapter2/","title":"Chapter2","section":"Part1","content":"Live in 30 minutes: You now have a website\nThis chapter covers\nRunning the Hugo command line Setting up a Hugo website with themes and content Outlining the structure of a Hugo-based website Setting up a continuous deployment pipeline Measuring performance and analyzing website maintainability Hugo is quick and easy to get started with. You can download Hugo and get going using just a basic text editor and a web browser. This chapter navigates through the entire length of Jamstack’s flow as figure 2.1 illustrates. We will create a website for a company named Acme Corporation. Acme Corporation is a leading manufac- turer of shapes like lines, circles, squares, and triangles in digital form. We will use the Hugo command line to bootstrap the website (section 2.1) with a prebuilt theme (section 2.2) and some ready-to-use content (section 2.3). We will also host the website on the internet (section 2.4) and analyze the decisions made in this chapter for performance and maintainability (section 2.5). Note that we will enhance this website throughout the book.\nFigure 2.1 This chapter runs through the entire flow of the Jamstack—from the developer to the published website.\nAppendix A provides the information to get up and running with Hugo. You can also use the official website at https://gohugo.io/ to download Hugo as well as to refer to its documentation. Hugo is available on all major platforms. For this book, you need Hugo with a version greater than or equal to 0.91.2.\n"},{"id":4,"href":"/zh/docs/part1/chapter1/1/","title":"1.1 JamStack中的工作栈","section":"Jamstack和Hugo","content":"1.1 JamStack中的工作栈\n要全面理解Jamstack，我们首先需要理解web栈的概念。 Web栈是用于Web应用程序开发的软件集合。 一些流行的web栈包括LAMP (Linux Apache MySQL PHP) 、微软。NET (IIS, ASP. NET, MS SQL Server), MEAN (MongoDB Express Angular Node.js), 和 MERN (MongoDB Express React Node.js). 图1.1显示了非基于Jamstack的网站的典型Web堆栈。\n网页由静态和动态资产组成。 不同的服务器为栈中的这些资产提供服务。 像Apache或IIS这样的web服务器主要托管传统web堆栈中的静态资产，例如图像，JavaScript和CSS。 这些文件不会在多个用户之间更改。 第二组资产是动态内容，可以是不同的。 它基于提供的请求参数，包括URL、请求头、Cookie或相关的HTTP POST数据。 具有PHP，ASP等软件的应用程序服务器。NET，或者Express采用这些参数并创建响应。 它可能需要对保存网站内容的数据库服务器 (如MySQL或MongoDB) 进行一系列请求。 应用程序服务器获取该内容，并使用应用程序逻辑将其缝合成JSON响应(Mean/MERN格式)，或使用HTML模板缝合成HTML内容(LAMP格式)，然后将其提供给Web浏览器。 通过执行JavaScript并使用CSS对提供的内容和图像进行样式化，将网页组装在浏览器中。\n自从互联网问世以来，这种网络架构基本上是相同的，但增长和流量的增加给这种架构带来了压力。 增加服务器中的CPU和RAM (称为垂直扩展) 无法处理通过现代internet移动的流量。 此负载要求我们向堆栈中添加多台计算机(称为水平缩放)。\n图1.1 用于开发的传统web堆栈。 非JAMSTACK网站有一个堆栈，其中包含提供静态资产的Web服务器。 应用程序服务器提供动态内容，通过使用存储在数据库服务器中的数据生成并在web浏览器中组装和呈现。\nWeb服务器易于扩展。 因为内容不会更改，所以我们可以在共享负载的多台计算机上复制它。 CDN执行跨地理上更接近最终用户的节点复制这些资产的任务，并为最终用户以更快的速度提供所有网络流量的互联网扩展。 图1.2 显示了左侧web服务器的缩放策略。\n图1.2 传统Web堆栈需要扩展以处理Web上的负载。 水平缩放web服务器 (左) 很容易。 我们可以根据需要添加任意数量的Web服务器来处理负载。 扩展应用程序堆栈 (右) 是困难的。 我们不可能拥有数百台数据库服务器(水平扩展)，而且我们可以在这些服务器中拥有的RAM和CPU容量(垂直扩展)也是有限的。 需要多种缓存技术来解决此问题。 JamStack建议(顶部)将尽可能多的工作从应用服务器转移到Web服务器。\n应用层 (应用程序和数据库服务器) 很难扩展。 如果我们通过在客户机上管理用户的状态来保持请求的无状态(通过JavaScript或Cookie)，我们就可以水平地扩展应用服务器。 因为这些服务器处理应用程序逻辑，所以很难将它们移动到CDN。\n数据库层是最难扩展的。 CAP定理告诉我们，在互联网规模上扩展常规数据库是不可能的。 (我们不能水平扩展到数千台MySQL服务器。) 该定理指出，在分布式数据库中，我们最多可以同时具有三个CAP属性中的两个:\n一致性-每次读取都会收到最新的写入或错误。 可用性-每个请求都得到一个 (非错误) 响应。 分区容限-尽管节点之间的网络丢弃(或延迟)任意数量的消息，系统仍可继续运行)。 诸如最终一致性之类的解决方法存在于应用程序堆栈中，其中数据库不一致，但在一段时间后变得如此。 这些变通方法导致应用程序逻辑上的困难，以及对我们可以使用服务器技术实现的某些事情的强制约束。\n尽管存在这些问题，但传统的web堆栈仍在internet规模中幸存下来。 尽管存在数据库可伸缩性问题，堆栈仍能正常工作的最大原因之一是负载类型。 在大多数情况下，数据库更改比检索该数据要少一个数量级。 我们可以通过增加缓存层来减轻数据库检索的负载。 读取数据库的副本和应用程序服务器上基于RAM的缓存都是解决方案。 我们甚至发现，许多网页不会在多个请求之间发生变化。 许多网站可以在应用程序层上添加cdn以减轻负载。 右侧的图1.2显示了此解决方案。\n仔细观察图1.2，应用层类似于web服务器层。 在为动态计算构建的应用程序服务器中管理缓存层要困难得多。 Jamstack通过将大部分逻辑从应用程序中移出到web服务器层来颠覆传统的web堆栈。\n注：JamStack不是传统意义上的Web栈。 它没有规定任何用于开发网站的特定技术。 它提供了一种Web开发方法，其中大部分网站都是预先构建的，客户端脚本编写增加了动态化。 这改变了传统堆栈中软件的性质和排列方式。\n显式地尝试缓存所有内容使得缓存管理变得简单得多。 我们可以预先计算和缓存大量需要动态计算的工作。 这种预计算(在JAMSTACK中也称为编译和预渲染)提供了增强性能的额外好处，因为当用户请求数据时，不需要在服务器中进行计算。\nJamstack不禁止服务器端或客户端处理。 它建议只有在必要时才使用这些工具。 部署期间的预计算效率更高，并且与应用程序服务器相比，web服务器的安全问题和维护需求更少。\n图1.3提供了在第一个发出的获取HTML页面的请求的运行时JamStack与传统Web堆栈的比较。 对于经典方法中的初始HTML，查询需要通过internet访问服务的原始服务器。 然后，负载平衡器选择一个应用程序服务器。 应用服务器可以向数据库发送多个请求以获取其需要的数据。 它根据应用程序逻辑和作为应用程序代码一部分的HTML模板组装响应，以创建传递给客户端以进行呈现的最终HTML。 使用Jamstack，编译步骤已经执行了数据库处理和基于应用程序逻辑的拼接。 这种HTML生成并不是针对每个请求都发生的。 因此，该请求不需要通过internet到原始服务器。 在地理上靠近客户端的CDN位置提供内容。 注意，图1.3仅显示了对数据的初始请求。 正常情况下，还会有对图像、JavaScript和CSS文件的额外调用。 这些请求可能要求从源服务器或第三方服务获取更多数据。 图1.3比较了第一个请求在传统Web堆栈和JAMSTACK架构中的运行时影响。 在常规方法中，当我们请求初始HTML页面时，它会通过负载平衡器到应用程序服务器。 应用服务器执行多次数据库调用以获取数据，然后基于模板创建HTML页面。 在Jamstack方法中，HTML是预先计算的，来自CDN。\n"},{"id":5,"href":"/zh/docs/part1/chapter1/10/","title":"1.10 不适合Hugo的案例","section":"Jamstack和Hugo","content":"1.10 不适合Hugo的案例\n像所有工具一样，Hugo也有自己的使用场景。 除了适用于任何Jamstack框架的所有Jamstack限制之外，我们需要了解Hugo的重点仅在于Jamstack的标记部分。 虽然Hugo提供了最快的JavaScript绑定器，并对NPM生态系统有很好的支持，但它对JamStack的JavaScript和API层采取了一种不插手的方法。 如果你想构建一个需要大量JavaScript与静态页面混合的工具，或者你想拥有一个与网站模板共享代码的应用编程接口，Hugo独立于这些部分的方法是不够的。\n当我们需要一些Hugo没有的功能时，Hugo可能不是最优的，而我们无法通过API实现这一点。 Hugo保持模板和模块无法访问其核心，以保持其灵活性并保持其性能不变。 对于想要构建一个定制的静态站点构建器的开发人员来说，Hugo可能不是正确的选择，因为它有很多插件来迎合不常见的用例。 例如，如果我们需要在编译时与SOAP或FTP协议进行交互，则Hugo可能无法做到这一点 (从v0.91.2开始)。\n"},{"id":6,"href":"/zh/docs/part1/chapter1/11/","title":"1.11 如何在Hugo和这本书中取得成功","section":"Jamstack和Hugo","content":"1.11 如何在Hugo和这本书中取得成功\n在本书中，我们将为领先的数字形状制造商Acme Corporation建立网站。 该网站将有常规的公司页面，支持动态评论和搜索的博客，基于JavaScript的形状编辑器，以及通过电子邮件发送的购买形状的店面。 我们将在本书中构建的网站的最终版本托管在https://chapter-13-09.hugoinaction.com/。\n我们将从JAMSTACK的标记层开始，这是Hugo擅长的。 我们将讨论在Hugo网站中创建和组织基于标记的文档，如何使用这些文档来渲染网页，创建共享web模板的主题， 以及如何使用模块创建可重用的内容和模板代码。 在本书的第二部分，我们将深入研究Hugo对Jamstack的JavaScript和API部分的支持。 我们将了解如何在编译时和运行时调用API，如何构建基于JAMSTACK的简单API，以及如何使用JavaScript来增强用户体验。 我们还将编译并捆绑一个复杂的JavaScript应用程序与一个基于Hugo的网站。\n要想读好这本书，你需要一台装有现代操作系统、能上网、能浏览网页的机器，以及对网络开发人员熟悉的工具和编程语言的理解。 这些包括HTML、CSS、JavaScript、Git、GitHub、任何模板引擎 (如Mustache、Jade或嵌入式Ruby (ERB))，以及可选的npm。 代码样例都可以在giHub上获得，并托管在 https://hugoinaction.com 上 我们建议使用不同文件之间的差异，以将本地所做的更改与代码示例中存在的更改进行比较。\n练习1.6 Hugo在Jamstack的图层上工作。\n"},{"id":7,"href":"/zh/docs/part1/chapter1/2/","title":"1.2 JAMSTACK如何工作？","section":"Jamstack和Hugo","content":"1.2 JAMSTACK如何工作？\nJamstack提供的简化堆栈在幕后进行了大量处理。 JamStack对编译过程的重视对Web平台来说是新事物。 图1.4解释了Jamstack的各个部分。\n图1.4查看JamStack的内部工作原理。 开发和内容团队维护基于Jamstack的网站的源代码。 该代码由网站数据和一组模板组成。 Jamstack构建器在编译过程中获取代码以创建静态网站的HTML/CSS/JS内容。 构建器还可以在编译时调用服务并输出充当API的JSON文档。 该输出被提供给CDN以在地理上进行分配。 客户端从最近的CDN端点获取网站。 客户端执行可以从服务中请求其他数据的JavaScript代码。\n万维网的相当一部分由CMS管理的网站组成。 内容管理系统 (CMS) 是用于创建和管理数字内容的工具。 大多数网站中的内容与表示逻辑分开，可以由不同的人管理，这需要开发和维护与业务逻辑不同的技能集。 在基于Jamstack的网站中，我们将内容存储在标记文档中，而不是存储在数据库中。 与数据库表中的单元格不同，标记文档允许使用常规的基于文本的编辑器查看和编辑页面内容。 如果需要，内容作者或编辑者可以直接编辑这些文件或使用图形CMS。 开发人员维护模板和业务逻辑，以组合数据和创建网站。 这些文件可以在像Git这样的版本控制系统中进行管理，并托管在GitHub这样的基于云的存储库系统上，以管理更改。 这形成了网站的标记(M)层。\n像Hugo这样的网站构建器使用存储在标记文件中的数据将网站编译为HTML和CSS文件，JavaScript和基于图像的资产。 构建者可以通过API与外部和内部服务进行通信，以获取要编译到网站中的数据。 构建器还可以将网站内容构建成像JSON这样的机器友好格式。 JSON文件充当Java代码或原生移动应用程序使用的标记数据的API(称为伪API)。\nCDN的地理分布的机器托管已编译的网站以供消费。 距离终端用户最近的CDN节点将该内容提供给终端用户。 所有静态内容都是与用户无关的，并且可以快速产生。 对于动态数据，可以使用JavaScript代码。 JavaScript是Jamstack的J层。 JavaScript为网站提供了互动性和个性化。\nJavaScript层可以与各种服务通信以提供动态内容。 这些服务公开了构成JAMSTACK的A层的API。 这些api封装了传统堆栈的应用程序服务器的剩余部分。 JamStack建议使用托管服务，如第三方拥有的服务或FAAS(功能即服务)云解决方案上托管的服务，以最大限度地减少维护。\n做旧学校\n编写内容并将其保存在磁盘上的文件夹中，然后将其上传到管理内容的共享主机提供商的方法看起来很像早期的网络，我们过去通过FTP连接上传HTML和PHP文件。 相似之处很容易看到。 这些相似之处引发了这样一个问题：这一次有什么不同？\n自从我们放弃控制完整的服务器以来，网络已经成熟了很多。 前端技术现在执行许多当时需要服务器代码的功能。 此外，共享托管已将自身升级到云，你可以在其中将托管和计算扩展到internet规模。 即使是传统的基于Web堆栈的服务也是云托管的。\n那个时代的另一个重大变化是工具。 像FrontPage这样的工具最初是针对设计师和最终用户的，让网站变成了一个复制粘贴的脚本网格，就连网站作者都不理解。 现代工具以开发人员为目标，并有助于优化、维护和性能。 现在我们用这些工具设计网站，而不是把它们混在一起。 我们从早期的网络中学到了。 我们有一个更好的系统，有足够的能力和灵活性来构建任何所需的应用程序，而不会有任何妥协。\n锻炼1.1\r在JamStack中，大部分逻辑应该驻留在哪里？\ra.服务器\rB.微服务\rc.编译模板\rD.客户\re. JavaScript "},{"id":8,"href":"/zh/docs/part1/chapter1/3/","title":"1.3 JAMSTACK中的JAM","section":"Jamstack和Hugo","content":"1.3 JAMSTACK中的JAM\nJamstack的JAM部分代表JavaScript、api和markup。让我们看一下这些组件中的每一个。\n1.3.1 Java脚本\nJamstack中的JavaScript是指提供交互性和动态功能的所有客户端脚本编写方法，这些方法对用户是个性化的，不能预编译。 这使开发人员能够对用户操作做出反应，并在运行时修改用户界面。 Jamstack将JavaScript框架及其管理的细节留给了web开发人员。\n在传统的堆栈中，服务器在处理用户交互方面扮演着突出的角色。 即使仅需要修改页面的一部分，它也会生成新页面。 这是不必要的，也不是最优的。 现代JavaScript完全能够将用户状态存储在浏览器中。 它可以与服务器通信并更新界面，而用户不需要重新加载或看到界面中的闪烁。 Jamstack使用JavaScript进行预抄写，以解决最佳用例-向最终用户提供交互式界面并从客户端到服务器进行通信的情况。\n1.3.2 应用编程接口(API)\n应用程序编程接口 (api) 为与web服务进行通信提供了定义明确的合同。 API抽象了整个服务器功能，因此客户端不需要了解服务器内部结构即可使用服务。 在Jamstack中，预编译和客户端JavaScript接管了通常在服务器上完成的许多工作，但是服务器仍然有其用例。 这些包括跨机器存储应用程序状态，需要比单台机器更多处理能力的计算，以及必须从网站浏览者传输回服务器的数据。 许多传统系统公开api与底层功能进行通信。 虽然这种方法适合JamStack定义，但JamStack建议尽量减少API的构建，以减少维护开销。 在Jamstack中，许多需要其他堆栈中api的操作处理方式不同。 你可以放置、更新或删除磁盘上的文件，而不是内容创建、更新或删除API。 只有基于网站中的用户操作 (如购买和评论) 的动态更新才需要专用的api。\n有第三方API提供程序提供高级API，开发人员可以使用这些API，而无需自己构建所有东西。 从处理注释到全文搜索，无需编写cus- tom代码即可大规模使用。 当我们需要编写自定义后端时，云服务提供商让这项任务比从头开始构建更容易。 借助FaaS，云服务提供商可以接管正常运行时间，持续的安全更新以及随用户负载扩展的所有权。 服务提供商在全球范围内维护性能和可用性。 开发人员编写代码并将其交给服务提供商进行部署。 正在进行的工作微乎其微。 然后，开发人员可以努力增强功能或在功能级别更新任何依赖项。\n1.3.3 Markup\n标记的传统定义在文本文档中包括一组注释 (例如HTML文档中的XML标记或Markdown中的文本周围的星星)，这些注释提供了有关如何理解或呈现文本的更多信息。 JAMSTACK将整个标记文档视为标记。 它由文本数据，注释和结构化元数据组成。\n标记形成了JAMSTACK的数据层。 与传统数据库不同，我们将标记存储在文本文件中。 它的原始形式是可读和可编辑的，而无需使用工具将其转换为可读格式。 标记语言提供了一种以简洁可读的方式编写格式化文档的方法。 Markdown是在JAMSTACK中编写内容的最流行的标记语言。(我们将在第3章详细研究降价。)我们用于与文档相关联的附加信息的各种元数据语言可以伴随此内容。 其中之一是YAML (Yaml不是标记语言)，我们也将在第3章中讨论。\n注：超文本标记语言(HyperText Markup Language)也是一种标记语言，你可以自由选择它来将数据写入JamStack。 但是，诸如Markdown之类的人类可读语言使阅读和维护我们的数据变得更加容易。 这在呈现过程中被转换为HTML，从而将布局(模板)和表示(CSS)排除在内容之外。\n使用基于标记的文档来存储数据有很多优点。 网页的大部分内容都是无结构的。 常规数据库将其保存在单个单元格中。 然而，这种方法并没有很好地利用数据库技术。 如果数据作为独立文件管理，我们可以使用像Git这样的版本控制系统来监视数据更改。 将数据与代码一起使用可以简化跨服务和构建环境的迁移。 我们可以将所有配置文件存储在一起。 优化和测试更加简单，能够创建新的构建环境(阶段、生产等)按需提供。 对于非结构化内容，数据库的大多数组织和查询功能都无济于事。 基于数据库托管博客或通用网页并不是对其资源的最佳利用。\n随着Git和GitHub的普及，许多开发人员已经熟悉了标记语言，尤其是Markdown。 大多数开发人员用标记语言编写自述文件。 这些语言稳定、规范、易学、易懂。 有很多工具可以用这些语言编写或将数据迁移到这些语言。 它们还可以与diff和合并工具 (用于比较文件中的更改) 一起使用，并且大多数编程语言都具有用于解析这些lan- guage的库。 该工具为程序员以他们喜欢的方式操作数据提供了极大的灵活性。\n锻炼1.2 JAMSTACK中的M代表什么？ a.标记 B.降价 c. MySQL D. MongoDB\n"},{"id":9,"href":"/zh/docs/part1/chapter1/4/","title":"1.4 为什么使用Jamstack？","section":"Jamstack和Hugo","content":"1.4 为什么使用Jamstack？\n预先构建呈现给用户的HTML内容具有独特的优势\u0026ndash;从微小的错误操作到出色的性能和成本降低。 我们将在以下各节中了解这些优点以及更多优点。\n1.4.1最小操作\n由于内容是在发布之前预先构建的，因此减少了站点中活动部件的数量。 服务提供商负责安全更新、硬件故障和网络问题。 云主机提供几乎100% 的正常运行时间，而无需网站所有者的任何积极参与。 无需随叫随到，无需考虑服务器、扩展、负载平衡、跨大洲的正常运行时间或任何其他运营开销。 开发人员可以专注于建筑的乐趣，而企业可以专注于其核心能力，而不是建立一个DevOps团队。\n1.4.2 出色的性能\nCDN完全托管作为静态网站提供的预构建HTML。 这样，每个文件都被缓存，并从地理上靠近最终用户的服务器提供服务。 没有到应用程序服务器的往返，也没有数据库查询，这可能会成为瓶颈。 大多数针对JAMSTACK的站点生成器在编译时生成HTML。 它已经可以在用户请求时呈现。 即使只有一个HTTP请求，该网站也可以正常运行。 使用Jamstack构建的简单网站可以在大多数审核中提供90% + 的性能评分。 如果开发人员在构建主题时对性能很敏感，那么基于JamStack的网站可以在这些审计中达到100%分数的所有标准。\n1.4.3 降低成本\n从托管堆栈中移除数据库和应用程序服务器可降低硬件成本。 随着操作变得自动，大多数DevOps需求都不存在。 所有这些都转化为显著的成本节约。 你可以使用静态网站主机 (如GitHub Pages和Netlify) 免费获得一个网站。 所有主要的云提供商，如AWS S3、谷歌云存储和Azure存储都提供低成本的静态托管。 无需拥有IT或DevOps团队来管理服务器团队。\n1.4.4 开发人员工作效率\n像Git这样的版本控制系统管理基于Jamstack的网站。 没有必要拥有复杂的开发环境。 在开发人员机器上运行代码只有一个命令。 大多数网站可以通过简单的推送到服务器上一天多次部署。 这些功能使开发人员有时间和灵活性专注于网站的内容。\n1.4.5 长寿\nHTML/CSS是构建的最稳定的技术。 今天的浏览器竭尽全力继续支持自20世纪90年代以来一直支持的所有功能。 如果你拥有一个基于Jamstack的网站，并且在互联网上消失了十年，当你回到你离开它的那个状态 (大部分) 时，它仍然会在那里。 除了静态服务器上托管的纯HTML、CSS或JavaScript之外，互联网不会宽恕任何技术堆栈。 你甚至可以在虚拟机器中继续使用静态站点生成器，而无需更新版本。 因为生成器是本地的，所以生成器中的安全漏洞不会影响网站。 你不需要上网并将这些漏洞暴露给互联网。\n1.4.6 工具\n由于活动部件较少，结构定义明确，Jamstack的工具比其他web堆栈更先进，功能更强大。 通过Netlify、GitHub页面等直接支持扩展，即可实现一键部署。 将整个网站作为代码存在也意味着没有什么可隐藏的。 没有复杂的安全或性能配置，堆栈中的不同层没有额外的管理开销，也没有集成开发环境(IDE)。\n即时更新\n对于JamStack来说，这似乎是一个限制，我们不能动态更新网站。 大多数传统系统都提供管理员模式来更新网站。 JAMSTACK没有开出任何药方。 使用Jamstack，不需要任何特殊工具来更新基于Jamstack的网站。\n标记语言友好且易于使用。 我们可以在任何文本编辑器中提供更新。 大多数版本控制提供商，如GitHub、GitLab和BitBucket，都可以从浏览器提交新的更改。 持续集成可以自动构建并将其部署到生产中。 我们获得了对我们的内容拥有完整的版本控制系统的好处。 我们也可以自由选择我们的文本编辑器。 作为额外的奖励，我们可以随时随地更新主题。 文本内容，自动部署和持续集成确保我们不会错过WordPress的管理模式，但是如果需要，也可以使用管理工具。 我们将在附录C中讨论Netlify CMS。\n"},{"id":10,"href":"/zh/docs/part1/chapter1/5/","title":"1.5 何时不使用Jamstack","section":"Jamstack和Hugo","content":"1.5 何时不使用Jamstack\nJAMSTACK的一个假设是，内容在编译时可用，并且不会快速更改。 如果这个假设被证明是假的，Jamstack不会提供很多。 以下各节提供了何时不使用JAMSTACK的用例。\n1.5.1 当存在无历史意义的动态数据时\n如果我们正在构建一个具有不断变化的数据的仪表板类型的应用程序，那么作为一个概念，预编译不会提供很大的价值。 基于传感器的数据可以在几毫秒内改变。 在许多情况下，没有人阅读这些数据。 Jamstack不能很好地与这种类型的应用程序配合使用。 一个主要的例外是报告，其中一些数据需要保留很长时间，经常被阅读，并且很少更改(如果有的话)。 这种类型的报告是预先生成和保存的完美案例。 匆忙做这件事是没有意义的。 Jamstack完全符合报告用例。\n1.5.2 基于用户生成的具有瞬时数据的内容的构建\nTwitter和Facebook等网站的帖子很小，我们很少将其作为单独的页面阅读。 这些被编译成提要，每个用户的提要是不同的，并且会随着时间的推移而变化。 用户可能在任何给定时间都不会阅读提要，因此预生成可能会浪费。 这些用例不适合JamStack擅长的一次写入、多次读取的场景。 虽然理论上我们可以编译经常使用的页面，但传统的web堆栈也可以做到这一点。 这里需要记住的一件事是，如果数据具有永久性价值，故事就会发生很大变化。 如果我们有用户生成的博客文章、产品页面或文章，这些文章写了一次，读了很多次，这又回到了Jamstack擅长的写一次，读了很多次用例。\n1.5.3 具有特定于用户的网页\n在一些网站上，开发人员为用户个性化每个页面。 此数据不同，因为它基于用户ID。 因此，预编译可能没有意义。 大多数用户可能无法登录。 无法公开访问可能导致负载增加的机器人。 数据的多次读取和一次写入的整个概念是错误的。 一个例子是日历应用程序。 因为每个用户的cal-Endar是不同的，所以预先生成每个人的日程表是没有意义的。\n1.5.4当没有数据要编译时\nWeb应用程序是用户既是创建者又是消费者的网站。 对于文档编辑器 (例如Google Docs)，没有数据可以显示。 在这些情况下，JAMSTACK方法没有帮助。\n请注意，Jamstack在以前的所有情况下都有助于构建网站的静态部分。 其中包括隐私政策页面和使用条款页面。 即使是关于我们的页面和公司博客也可以使用果酱堆栈进行最佳构建。 这些页面可以使用JamStack方法设置，而不同的堆栈可以为网站或Web应用程序的其余部分提供服务。\n锻炼1.3 以下列表中的哪个网站最适合使用JamStack构建？ A.搜索引擎 B.购物网站 c.社交网络 D.图像编辑器\n"},{"id":11,"href":"/zh/docs/part1/chapter1/6/","title":"1.6 选择构建器","section":"Jamstack和Hugo","content":"1.6 选择构建器\nJAMSTACK没有规定一种特定的技术。 开发人员可以自由选择自己喜欢的技术来构建网站。 有大量具有各种权衡的静态站点构建者。 这些是用不同的编程语言制作的，提供集成，并支持许多插件。\nJekyll是用Ruby构建的，是一个流行的静态站点构建器，可以与GitHub页面无缝集成。 GitHub可以从repository自动部署基于Jekyll的网站，而无需编写自定义构建步骤。 许多Hugo用户从Jekyll开始他们的旅程，并转移到Hugo以寻求更好的构建性能。\nHugo是拥有深度功能集的最快静态站点生成器之一。 雨果的开发团队一直专注于构建一个系统，该系统可以在不到一秒的时间内呈现一个拥有数百个页面的复杂网站。 雨果 (Hugo) 用Go (Golang) 编写，是包含所有电池的单个二进制文件。 由于没有插件，核心团队已经将其大部分功能标准化。 这种标准化允许以大量关注可维护性和性能的思想构建元素。 它的模板语言是一种完全的编程语言，我们可以用它来创建任何东西。 文档维护良好，社区活跃在论坛中。 许多拥有数百万月度用户的热门网站都有雨果作为他们的发电机。 雨果的核心是稳定的，虽然它确实快速发展，但它与旧版本具有兼容性。\nGatsby、Nuxt和Next.js等一批流行的基于JavaScript框架的静态站点构建器应运而生。 这些迫使你遵循他们对如何编写和使用JavaScript的选择。 像Next.js这样的框架包括构建API后端的功能。 如果你希望开发一个JavaScript繁重的应用程序并同意这些框架做出的决定，那么这些可能是不错的选择。 由于JavaScript生态系统的性质，以及这些框架存在的时间相对较短，预计会有一些波动。\n还有另一组静态站点构建器，例如Python中的Pelican和Rust中的mdBook。 它们在功能集和受欢迎程度上要小得多。 如果你与一种语言绑定并且想要编写自定义功能，请使用这些功能。\n"},{"id":12,"href":"/zh/docs/part1/chapter1/7/","title":"1.7 为什么选择Hugo？","section":"Jamstack和Hugo","content":"1.7 为什么选择Hugo？\nHugo是最古老的静态站点生成器之一，并且随着时间的流逝，其受欢迎程度不断提高。 它的创建者Steve Francia在CMS和技术写作需求方面拥有丰富的经验。 他的背景包括建立美国职业足球大联盟和Priceline使用的封闭源CMS (Supersite)。 他对Magento和WordPress有着丰富的经验，并曾在Drupal的董事会任职。 他领导了MongoDB和Docker的技术写作部门。 他利用了所有这些经验，利用了每个系统的优势，并将其引入到Hugo的设计中。 Hugo处于主要为非技术受众构建的WordPress之类的工具与Rails或Express.js之间的最佳位置，Rails或Express.js提供了生成通用软件的功能，但需要持续维护。 使用Hugo，你可以获得定制主题的灵活性，比大多数其他选项维护更少，并具有出色的性能。 Hugo适用于那些不介意进入代码的用户，以及那些需要在项目之外生活的用户。\n你并不孤单\nHugo在业界非常受欢迎。 像引导(https://getboot strap.com)、让我们加密(\rhttps://letsencrypt.org)，sMash Magazine)(http：//www.smashingMagazine.com)、Netlify(\rhttps://www.netlify.com/)，)和1Password Support(\rhttps://support.1password.com/)大规模使用Hugo)等网站。 Smashing杂志将其网站从WordPress迁移到了Hugo，因为Hugo的性能和易用性。\n1.7.1 Hugo速度很快\nHugo是最快的功能丰富的静态网站构建器。 虽然我们在开始一个项目时可能不会注意到这一点，但这在我们的日常生活中是极其重要的。 等待编译或刷新是开发人员感到沮丧的重要原因，如果项目是一种爱好，则可能意味着项目的死亡。 当技术修改迫使我们对我们的网站模板进行重大更改时，性能变得更加关键。 例如，移动设备的出现给许多WordPress主题带来了死亡，在这些主题中，更新每个方面都非常痛苦，以至于开发人员放弃了。 此外，一个基于Hugo的网站即使拥有十年的内容，也会继续提供令人尊敬的开发业绩。 与任何较慢的框架相比，基于Hugo的网站的改版或重写更容易，更有趣。\nHugo和Go语言\n人们担心的一个问题是，采用Hugo意味着学习Go语言。 虽然这对于用脚本语言编写的其他静态站点生成器是正确的，但对于基于GO的应用程序则不是这样。 没有必要学习Go或了解它是如何与Hugo取得成功的。 就像人们不需要学习C++就能使用Windows或Photoshop一样，Hugo也不需要任何Go编程知识。 这本书没有一行Go代码。 Go编程语言内置了对并发性的支持。 在Go中编写并行执行的代码比在用于构建网站生成器的许多其他编程语言中更容易。 Hugo在不增加复杂性的情况下，从Go的速度中受益匪浅。\nHugo的用户使用Go模板语言，尽管名称如此，但它与Go本身是不同的语言。 它允许我们编写任何我们想要的东西，包括模块和函数，而无需处理多线程代码的大量复杂性。 如果你不打算编写自定义主题或短代码，你甚至可能不需要Go模板语言。 你可以用标记语言编写内容，然后从货架上选择一个主题来构建你的网站。\n大多数其他基于Jamstack的网站构建器都具有单线程，顺序流的源语言。 这种方法允许他们拥有插件，但以性能的形式支付巨额费用。 凭借Hugo提供的最重要的功能，无需在构建性能和开发人员体验方面与缓慢的框架妥协。\nGo是较新的语言之一(2009年公开发布)，但它已经打入了主流开发。 就采用而言，这是前十名的语言。 包括Docker和Kubernetes在内的重大项目都是用Go编写的。 此外，大多数云都是用Go编写的，包括AWS、Azure和谷歌云平台 (GCP)。 包括谷歌、美国运通和Dropbox在内的大企业广泛使用。\n方便的是，Hugo的创造者史蒂夫·弗朗西亚 (Steve Francia) 也是谷歌Go编程语言的产品和战略负责人。 因此，Hugo是一个Go团队非常了解的项目。 它影响编程语言本身，并可以采用其最佳功能。\n1.7.2 Hugo状态稳定\nHugo的核心功能已经支持了很长时间，并且不太可能打破。 任何新添加的功能都要确保这些功能不会受到干扰，并继续按原样工作。 在Hugo (Hugo) 的早期，随着团队专注于正确构建架构，开发进展缓慢。 这种做法得到了回报。 Hugo灵活且可扩展到新功能，并且大多数版本都不会破坏使用它构建的数千个网站。\nHugo开发团队相信Hugo在保持向后兼容性的同时会不断进化。 Hugo试图在各个版本之间向后兼容，并在需要更改某些内容时指导我们进行升级。 如果你选择了一个旧的主题，并获得了最新版本的Hugo，你可能会收到一些警告，但大多数应该会继续工作。\n1.7.3Hugo是为表演而建造的\nHugo社区有一种倾向，即在他们所做的每一件事中都寻求性能提升。 在社区论坛中，有很多关于提高网站性能的建议。 如果你从互联网上找到一个与Hugo一起做某事的随机脚本，很可能它的作者已经对其进行了性能优化。\nHugo的核心性能也影响其输出。 这些性能指标还可用于其他用途。 开发人员可以从Hugo用于优化工作流的方法中学习。\n1.7.4Hugo自给自足\n一个插件繁重的系统似乎提供了很大的灵活性和功能，直到主要维护工作开始。 你的网站可能会进入糟糕的状态，即使在框架被积极维护的同时放弃了一个插件！ 插件放弃一直是像Rails这样的框架的一个经典问题，每个主要版本都成为迁移所有插件的巨大痛苦。 我们可以在Backbone和Angular等生态系统中看到同样的情况，那里有许多陈旧的插件。 即使是极受欢迎并积极维护的Jekyll，也有相当大的插件腐烂问题。\n自给自足使Hugo得以绕过困扰其他项目的问题。 核心团队具有标准化的最佳方法来执行本地可用的任务。 Hugo团队在不需要较低级别的API兼容性的情况下优化了Hugo。 他们继续为标准化工作流编写复杂的多线程逻辑，以花费用户可以在其他地方花费的额外几毫秒。 与插件作者相比，Hugo的用户得到的支持要多得多，而且他们也不那么害怕放弃他们的核心工作流程。\n自成一体并不意味着Hugo不可扩展。 Go模板语言很强大，用户可以将代码片段作为模块共享，这些模块可以重复使用，可以使用这种语言执行复杂的逻辑。\n1.7.5 Hugo是单个文件\nHugo将其所有核心依赖项和资源打包到一个可执行文件中。 单个文件使下载Hugo，将其传输到另一台机器并进行备份变得非常简单。 在系统中，由于安全方面的考虑，每个文件都需要进行大量的检查，因此，没有其他依赖项的单个二进制文件就会大放异彩。 开发人员可以将Hugo二进制文件与他们的源代码合并，以便在受限的环境中使用它。 由于只有一个文件负责所有事情，因此没有要更新的依赖项，也没有要管理的构建系统。 带有自定义api的完整web堆栈可以使用少量依赖关系来构建。 这种自由与基于JavaScript的静态站点构建器形成鲜明对比，后者有数百个依赖项，每个依赖项都可能需要安全团队进行审查才能在企业环境中使用。\n1.7.6Hugo可以极低的维护\n由于移动部件(插件和操作系统依赖)更少，安装占用的空间很小，没有数据库，也没有复杂的托管步骤，与其他Web开发方法相比，Hugo的维护工作要少得多。 每个部门都需要保持。 只需Hugo和托管提供商，你就可以获得一个维护成本较低的引人注目的网站。 虽然Hugo的更新向后兼容性被破坏 (出于有效的性能、可扩展性和可维护性的原因)，但当你有时间的时候，你可以自由地接受更新，而且你不必修复神秘的插件。 对于网络开发世界中的大多数其他生态系统，我们不能这样说。\n1.7.7Hugo可以让你免于分析瘫痪\nHugo固执己见，拥有许多快速启动和运行的技术。 虽然强大的模板系统允许你为问题推出自定义解决方案，但Hugo团队已经解决了最常见的问题。 Hugo有通用的分页实现，将内容分类为无限类型的类别，并获得核心网站元素，如菜单。 Hugo的启动和运行很容易，因为有一种有据可查且广泛的方法可以解决大多数可用的问题。\n1.7.8 Hugo是强大的\n尽管有自以为是，Hugo还是多才多艺。 Hugo扩展的Go模板语言功能强大且灵活。 这种能力为开发人员提供了与Hugo一起编写适当程序的能力。 Hugo提供的标准库非常庞大，而且还在不断增长。 它从一开始就具有出色的性能。 即使你写了糟糕的代码，内置函数的核心性能也确保了网站编译的相对良好的性能。 通过在网站生成期间访问api，Hugo提供了大量的功能，而不会损失生成的输出的性能。 你可以使用Hugo在网站的任何位置编写函数，包括在开发内容时(作为嵌入在标记中的自定义短码)进行一些特殊处理。 你可以将其封装为可以重用或保留为特定页面上的一次性代码片段的内容。\nHugo有很多Web开发原语。 尽管如此，不使用它们似乎并不像是在对抗框架。 如果你不想使用Hugo提供的特性，而使用模板语言构建自己的特性，那么使用Hugo的其余部分的体验不会降低。 Hugo为与api和Java脚本的交互提供了良好的支持，这些api和Java脚本可以在需要的地方提供可扩展性和动态性。\n1.7.9 Hugo是可扩展的\nHugo已经迎合了具有多语言内容的网站，拥有数千个页面和数百万每月活跃用户。 Hugo在处理互联网上一些规模最大、使用量最大的网站方面有着良好的记录。 已经有足够的原语和功能来将基于Hugo的网站从开发人员扩展到团队。 Hugo支持多种输入和输出格式。 它具有多种功能，可以使团队的非技术成员实现日常工作的自动化。\n1.7.10Hugo是一个社区项目\n一个志愿者社区维护Hugo，对该项目没有商业兴趣。 这种自愿性使项目的方向符合社区的最佳利益。 Hugo无法在公司的心血来潮中转移，被收购或关闭。\n图1.5 DevOps和JamStack：Web开发人员Alex与担任系统/IT管理员的Bob交谈。 Bob说服管理层将基于云的解决方案与现有技术一起使用，并将调查放到Jamstack中。\n"},{"id":13,"href":"/zh/docs/part1/chapter1/8/","title":"1.8 速度真的很重要吗？","section":"Jamstack和Hugo","content":"1.8 速度真的很重要吗？\n我们不能足够强调构建性能的重要性。 Hugo使用了许多技术来加快构建时间，比如拥有一个支持所有层缓存的多线程核心，以防止尽可能多的返工。 速度自由将开发人员从每次小的更改后等待构建完成的负担中解放出来。\n如果你在watch模式下启动Hugo(一种特殊的开发模式)，网站在不到一秒的时间内就会出现。 它会重新加载你的编辑，而无需完成为实时重新加载设置花式热模块替换的整个步骤。 这个功能不仅是针对主题的，也是针对整个网站的！ 我们可以在5分钟内编辑网站，这可能是我们在其他琐事之间进行的。 在其他框架中，准备工作本身就是一项任务。\n因为你无需在更改后重新编译站点，所以开发人员可以进行更改或进行实验并快速查看结果。 数据输入也是如此。 静态站点构建器和缓慢构建时间的一个重大负担是，提交数据是内容编写者需要计划的事情，因为启动和运行本身可能需要时间。 WordPress的灵活性和JamStack的性能是雨果这样的框架所无法比拟的。\n随着Hugo核心的性能和所有原语的曝光，作为一名开发人员，你开始重新思考你的网站建设策略。 这段代码是否需要进入必须在访问此页面的10亿客户计算机中的每一台计算机上运行的JavaScript中，或者我们是否可以编写此代码，以便它运行一次并将结果保存为SVG或预计算\nHTML，这样我们的客户就不必重新执行了？ 在构建过程中，这些微小的调整对提高网站的性能大有裨益。\n锻炼1.4\nHugo是使用哪种编程语言构建的？\n"},{"id":14,"href":"/zh/docs/part1/chapter1/9/","title":"1.9 我们可以用Hugo建造什么？","section":"Jamstack和Hugo","content":"1.9 我们可以用Hugo建造什么？\nJAMSTACK是一个多用途的概念，我们可以将其应用于各种问题。 Hugo凭借其处理规模的能力，一直是Jamstack成功的典范。 当信息从服务器流向客户端时，Hugo大放异彩，这样用户就可以专注于消费而不是创造。 这种方法符合发布的传统定义，在该定义中，内容创建者通过web等媒介向消费者提供内容。 以下几节将向我们介绍雨果擅长的东西。\n1.9.1个人网站和博客\nHugo非常适合建立和运营个人网站。 个人网站的大目标是低维护、低成本和展示你品味的灵活性。 在这本书中，你将看到我们如何在几乎没有监督的情况下构建一些东西，几乎是免费的托管，并且有足够的灵活性来定制你想要的东西。 你将获得出色的性能，能够在所需的时间和地点进行更新，全面的SEO支持以及快速入门。\n你可以选择任何公开可用的Hugo主题来开始，并在几分钟内启动并运行一个像样的网站。(你会惊讶于无需任何定制即可使用的功能如此之多。)一旦有，它是直接的分叉主题，并开始定制它，以留下你独特的印象在互联网上。\n1.9.2 非技术性商业网站\nHugo可以扩展到并行更新内容的团队，没有任何问题。 核心竞争力不包括建设网站的企业需要一些易于维护、成本低、性能突出的东西。 他们还想要灵活性和控制力。 Hugo勾选了所有这些盒子。 它是经过深思熟虑的，对于任何供应商团队来说都很容易理解。 Hugo很少提供开发人员可以编写有害代码以减慢网站速度的地方。 整个机制足够灵活，可以立即添加业务所需的一个定制页面，而不需要遍历和撕毁整个网站。\n借助Jamstack的JavaScript和API层，你可以扩展Hugo网站，为动态网站动态更新提供保留的功能。 在本书中，你将看到我们如何构建低成本、低维护的功能，如购物车，同时静态管理网站的其余部分。\n如何成功与Hugo和这本书\n1.9.3 文档网站\nHugo非常支持从CSV或JSON文件中读取结构化数据，然后从这些文件中创建网站，你仍然可以应用自定义主题! 它内置了对语法突出显示的支持，可以快速扩展到大量页面。 这些使得它非常适合编写自定义网站，这些网站可以从API文档中读取，并根据规范准备格式整齐的版本。\n1.9.4基于JamStack的混合网站\n所有网站都有显示内容的页面。 例如，这些页面包括隐私政策、关于我们的通用页面、博客、产品列表页面和公司发布新闻声明的新闻编辑室。 Hugo和Jamstack可以帮助保持内容以低成本运行，并具有高可用性和良好的性能。 基于服务器技术的页面可以单独交付，也可以内置在Java脚本中，使用服务器公开的API与服务器进行通信。\n锻炼1.5\n是非判断：基于Hugo的网站需要在本地提供完整的设置才能编写内容。\n"},{"id":15,"href":"/zh/docs/part1/chapter2/1/","title":"2.1 你的第一个Hugo网站","section":"Chapter2","content":"2.1 你的第一个Hugo网站\nHugo提供了广泛的命令行，公开了其所有功能，包括引导新网站。 本节向你介绍Hugo的命令行。\n2.1.1 Hugo命令行\nHugo是一个精心设计的命令行工具，提供了Hugo的所有功能。 它通过迁移数据、创建占位符、分析性能以及构建网站的核心任务来提供帮助。 Hugo命令行有两个不同的部分:\n命令-确定你想让Hugo做的任务。 你可以通过在命令行上使用hugo [command]来提供命令和子命令。 Hugo的命令是分层次的。 一个简单的hugo调用运行默认的命令来构建网站。 发行hugo new以创造新事物。 hugo new的默认创建新内容页面。 你可以使用Hugo新网站来构建一个网站骨架吨，并用Hugo新主题来生成一个主题。 标志 (也称为命令行参数)-指定通过提供不同的配置来修改命令结果的选项。 标志是特定于命令的，并且每个命令都可以有独立的标志。 例如，new site命令中的 \u0026ndash; format yaml将元数据格式从默认TOML更改为YAML。 学习Hugo命令行的直观方法是使用\u0026ndash;Help标志。 Hugo的帮助是分层的: hugo-Help为hugo命令提供帮助，并将hugo new列为子命令； Hugo new\u0026ndash;Help为新命令提供文档，并将SITE作为子命令提到。 Hugo的帮助还显示了每个命令可用的所有标志。 你还可以生成手册页格式的Hugo命令行文档(就像基于Unix的操作系统中的man命令所使用的那样)。 为此，使用hugo gen man或使用hugo gen doc进行Markdown文件。 让我们通过创建我们的第一个网站来看看这一切是如何结合在一起的。 要在Hugo中创建一个新的网站，我们将在下面的清单中使用该命令。 清单2.1创建新网站的Hugo命令 \u0026rsquo;\u0026rsquo;' hugo new site acme-corporation \u0026ndash;format yaml \u0026rsquo;''\n该命令使用YAML作为元数据语言在当前文件夹的一个名为acme-Corporation的子文件夹中创建Hugo框架文件夹结构。 该命令的各个部分在图2.2中被标记。 请注意，对于本书，我们将使用Yaml(\rhttps://yaml.org/))而不是缺省的TOML(\rhttps://toml.io)元数据语言。 YAML在通用编程社区中更为普遍，比TOML的冗长程度更低，并且GitHub对它的支持更好。 它是一种更容易入门的语言，对于整个Hugo生态系统的新用户来说是更好的选择。 我们将在第3章讨论YAML作为Hugo的元数据语言。 附录B讨论了TOML作为元数据语言选项。 请注意，官方的Hugo文档提供了所有支持的语言的元数据。\n练习2.1 以下哪一项可以让你在Hugo问题上获得帮助？ A.\u0026ndash;帮助标志 B. man command C. Hugo网站d. 所有这些都是\n2.1.2 添加到源代码管理\n任何项目的第一步都是将更改提交到版本控制存储库。 命令行界面不支持本机撤消/重做。 如果你立即删除文件，则该文件不会转到回收站或垃圾箱文件夹。 任何运行的脚本都有可能导致数据丢失，包括Hugo命令。 除非你对源代码进行了版本化，否则没有回头路。 版本控制系统允许恢复已删除的文件并恢复到较旧的版本。 本书使用的版本控制系统是Git。 Git是最流行的系统，GitHub对其进行了紧密的集成。 这也包括互联网上最受欢迎的静态网站主机GitHub Pages。 将每个检查点提交给版本控制是一个好主意。 你可以使用git命令或像SourceTree或Fork这样的GUI客户端来执行这些任务。 在命令行上，可以使用多个Git命令执行此操作，如清单所示。 为了帮助进行版本控制，请注意代码检查点，你可以在其中暂停检查代码。\n清单2.2Git命令用于创建新的存储库 创建一个空的Git存储库 cd acme-corporation\n即使我们创建了一个网站骨架，也并不意味着我们有一个正常工作的网站。 Hugo命令创建的大多数骨架文件夹都是空的。 至少，我们需要提供一些内容和主题以将其呈现在我们的网站上。\n代码检查点https://github.com/hugoinaction/hugoinaction/tree/chapter-02-01\n注意额外的文件 (Readme.md，License.md和.gitignore) 已添加到服务器上的存储库中，以获得更好的GitHub支持。\n2.1.3 Hugo源文件夹的结构\n在添加主题或内容之前，让我们先来看看Hugo网站的组成。 一个Hugo source文件夹不仅仅是模板和内容。 Hugo new命令生成六个文件夹，我们将在使用Hugo的功能时创建更多文件夹。 如图2.3所示，我们网站中的关键文件夹包括以下内容: -Archetypes-包含内容文件的模板。 Hugo试图尽量减少创建内容所需的复制和粘贴工作。 我们可以为该文件夹中的Markdown文件或文件夹创建模板，Hugo使用它们来创建基本内容文件。 我们将在第5章介绍原型。\n内容-包含传统上进入数据库的所有内容。 我们可以根据需要将内容组织成文件和文件夹。 默认情况下，Hugo基于该文件夹的结构直接生成网站输出，不过我们可以使用每个文件中的元数据覆盖该结构 (称为front matter，我们将在第3章中讨论)。 我们将在整本书中使用Content文件夹。 数据-以YAML，TOML，CSV或JSON文件的形式存储结构化内容，这些内容在整个网站中作为全局变量可用。 传统数据库存储的不仅仅是网页内容。 可以有与结构化数据关联的表，这些表在内容文件夹中没有位置， 因此，当我们从Hugo外部生成内容并将信息作为JSON或CSV文件传递给Hugo使用时，这个文件夹会派上用场。 我们将从第5章的数据文件夹中读取-布局-覆盖主题的部分。 Hugo让我们可以灵活地混合和匹配来自主题的页面，并编写我们自己的定制页面。 在此文件夹中，发生主题的所有自定义。 我们可以使用该目录来存储这些被覆盖的主题布局。 主题和布局之间的界限是模糊的，Hugo给了我们完全的灵活性，通过逐个覆盖页面来缓慢创建主题。 我们将在本章中使用布局文件夹来更新主页，并在第6章和第7章中详细介绍布局。 主题-包含我们用来使内容文件夹中的内容可显示的代码。 我们可以使用GO模板语言来编写主题。 我们将在本章中添加主题，并在第7章中创建自己的主题。 图2.3 Hugo中的网站源代码和内容位于源文件夹中。 hugo new命令创建了一组基本的文件夹，该文件夹指定了Hugo网站的各个部分: 原型文件夹(用于内容模板)， 内容文件夹 (用于文本内容)， 数据文件夹(用于结构化内容和键-值对)， 布局和主题文件夹 (用于模板和单个页面设计)， 以及静态文件夹(用于需要托管但不属于任何其他类别的附加内容)。 在使用过程中显示的其他文件夹和文件包括资产 (对于未处理的图像和JS/CSS文件)， 配置(用于最初作为单个文件生成的设置和元数据)， 资源 (用于缓存处理的资产)，公共资源 (用于保存输出)， Vendor和go.sum/mod(用于Hugo模块)、Package*.json和NODE_MODULES(用于JavaScript)、 。github/netlify.toml (用于持续集成) 和api (用于自定义第一方api)。\nconfig-保存网站的配置。 此目录包含跨网站共享的元数据，包括主题的名称以及需要传递给Hugo或主题以呈现内容的任何参数。 默认情况下，Hugo创建一个config.yaml文件。 Hugo支持将此配置文件拆分为多个文件，并具有不同的测试和生产环境。 这会将配置转换为文件夹。 我们将在第4章中详细介绍配置。 静态-存储静态内容，如字体或PDF文件。 Hugo将此内容按相同方式复制到输出目录中。 此文件夹在某种程度上相当于apache/nginx Web服务器根文件夹，你可以在其中放置任何要渲染的HTML文件。 建议在内容，数据，主题和布局文件夹中放置尽可能多的内容，以对其进行编程访问，并从Hugo的渲染管道中受益。 在静态文件夹中，我们可以存储二进制文件，如.pdf、.woff(用于Web字体)和.zip文件，用于不属于任何其他地方的可下载内容。 我们将把一些文件放在本章的静态文件夹中。 在所有这些文件夹中，Content文件夹是我们通常花费最多时间向网站添加内容的文件夹。 themes文件夹包含开发人员可以在网站之外管理的主题。 相比之下，我们不经常更改其他文件夹(数据驱动网页的数据文件夹除外)，只有在需要添加重要内容时才会更改。 练习 2.2 以下哪个文件夹包含网页上显示的文本？ a. markup b. markdown c. content d. data e. text\n在建立基于Hugo的网站时，以下是你将遇到的其他一些文件和文件夹：\nassets folder-将图像，JavaScript和CSS文件作为未处理的源代码放置在网站上全局使用。 此文件夹允许我们在编译期间处理这些文件。 Hugo可以调整图像大小，捆绑和缩小JavaScript文件，并通过其资产管道 (Hugo Pipes) 将SCSS转换为CSS。 我们将在第6章中学习图像操作和资源捆绑，并在第10章中使用JavaScript资源。 public folder-Hugo的默认输出目录，Hugo命令在这里生成要部署并缓存到CDN的HTML输出。 resources folder -处理数据时，Hugo会在此文件夹中缓存大量操作的结果。 我们应该将此文件夹放入我们的版本控件中，并跨构建重用其数据。 这个文件夹是Hugo获得出色表现的关键因素之一。 处理图像是CPU密集型操作，需要时间。 大多数资产在构建过程中不会发生变化，只要处理过的图像不发生变化，缓存它们就可以显著提高Hugo的性能。 go.mod and go.sum files-Hugo模块使用这些文件来同步项目依赖关系。 我们很少查看这些文件，但我们确实需要将这些文件放在版本控制中。 我们将在第8章介绍这些文件。 vendor folder-存储我们可以通过Hugo模块包含的第三方依赖项。 我们将在第8章中使用Hugo模块时创建此文件夹。 node模块、Package.json、Package.lock.json和Package.hugo.json文件-将Hugo与Java生态系统关联和集成。 我们将在第10章中详细讨论与Hugo一起使用JavaScript。 .github folder and netlify.toml files - 将Hugo与持续集成服务GitHub和Netlify联系起来。 我们将在整本书中使用这些服务。 api文件夹-虽然不是标准的，但我们将在第11章中创建这个文件夹来存放定制的API。 "},{"id":16,"href":"/zh/docs/part1/chapter2/2/","title":"2.2 Adding a theme","section":"Chapter2","content":"2.2 Adding a theme\nComing back to Acme Corporation’s sample website, before that website can see the light of the day, it needs a theme and some content. A theme in Hugo represents all the logic that converts markup documents into presentable web pages. It consists of tem- plate code, JavaScript, and CSS assets and images used for common elements like icons and backgrounds. Creating a Hugo theme is time-consuming, and it is a good idea to try out some prebuilt themes to begin with. NOTE If you plan to use a theme created by someone else, you may not need to learn the Go template language to use Hugo.\nYou can create a website by learning a markup language like Markdown and a meta- data language like YAML. You can always modify the theme to customize the UI, but if you want to get a website up and focus on the content, you only need to know a con- tent markup and a metadata language. For Acme Corporation, we will start with a pre- built theme that’s ready to use. There are multiple ways to get a theme:\n- Use Hugo Modules to integrate the theme. Hugo Modules is Hugo’s package man- agement system that allows themes to have dependencies. Hugo can automati- cally fetch dependencies required by a theme when building your site using Hugo Modules. Themes with dependencies will not work with other integration methods. Hugo Modules have setup requirements that we will discuss when introducing it in chapter 8.\r- Use Git Submodules to reference the theme in the themes folder. The Git version manage- ment system can set this up for you. This allows one Git repository to include another repository as a module within it. The dependencies can be linked to another server location and built independently. While the submodule feature is a part of Git and needs no separate installation, it still needs to be set up.\rThis feature is less potent than Hugo Modules. Theme authors who have not updated their themes to support Hugo Modules mention Git Modules as the integration method for their theme. However, over time, the use of Git Sub- modules will diminish in the Hugo world, and we do not recommend using it in newer themes and websites.\r- Download and copy the theme to the themes folder. The download-and-copy approach is the simplest of techniques. Because the theme code is available locally, we can easily read it to understand what the theme is doing, modify it, and view our web- site’s updates. When developing a new theme, this approach allows for making changes quickly and saves us from the overhead of managing different reposito- ries. To simplify getting started, we will use the download-and-copy approach for the book’s first seven chapters.\r2.2.1 Adding a theme to the website\nWe can find themes on the Hugo website at https://themes.gohugo.io/. While most themes work with the download-and-copy approach, some may have dependencies for which Hugo Modules are necessary. We will use the Eclectic theme, which has no such requirements. A copy of the Eclectic theme is provided in the code samples accompa- nying this book (\rhttps://github.com/hugoinaction/hugoinaction/tree/chapter-02- resources/01). It is also available at https://github.com/hugoinaction/Eclectic.\nWe need to download and paste the Eclectic folder into the themes folder for our website for it to be made available. The files are present in the proper subfolder so that you can place them in the root folder of the website. Each listing comes with the path to the file and the filename where the changes need to be made. For loading\nEclectic as the theme for our website, we need to specify it in the website configura- tion file using the theme key. Listing 2.3 tells Hugo to look for a folder named Eclectic in the themes folder and to load the theme from that folder.\nNOTE In the chapter resources throughout the book, the files are provided in the proper relative paths from the website root and need to be placed in the exact same relative location for your website.\nListing 2.3 Updating the theme in the config file (config.yaml)\r\u0026hellip; theme: Eclectic\nExisting data that’s generated by the hugo new command.\nCODE CHECKPOINT\thttps://chapter-02-02.hugoinaction.com, and source code: https://github.com/hugoinaction/hugoinaction/tree/chapter-02-02.\nNOTE You can compare various GitHub branches by navigating to https:// github.com/hugoinaction/hugoinaction/compare/chapter-02-01..chapter- 02-02, where chapter-02-01 and chapter-02-02 are branch names. The Readme file at https://github.com/hugoinaction/hugoinaction provides every code checkpoint (along with its respective section), a link to the hosted version, and the diff from the previous code checkpoint. It is a good idea to view the hosted version of a code checkpoint before reading the correspond- ing section of this book.\n2.2.2 Running the dev server\nWe can run our Acme website in development mode using the command hugo server on the command line (we could also use hugo serve). This command creates a development server that provides local content. The development server mode com- piles the code automatically when changed. It has near real-time updates to the web- site’s locally-hosted version (popularly called live reload) with content changes. The default port (the location in the machine where we can find the website) for Hugo is 1313, and unless something else is running at that port (in which case, it can be changed by \u0026ndash;port flag), the development mode website should be avail- able there. You can open http://localhost:1313 in your browser to find the default website as figure 2.4 shows. The default home page is unique to most themes but needs configuration to be used.\nListing 2.4 shows how we can run the Hugo development server by using the hugo server command. This command hosts the Hugo-based website locally at http://local- host:1313/ by default. It automatically rebuilds the server as the content changes so that we can view it in the web browser.\nFigure 2.4 Default website with the Eclectic theme. When we chose the Eclectic theme for a Hugo-based website, Hugo created an index page based on that theme, which the website can render even if we provide no content for the page. (It will look better when we configure the page, but it still works without anything.) This page can be used as a starting point to develop the rest of the website. (Background image by theglassdesk on Pixabay.)\nIf we run hugo without additional arguments, Hugo compiles the entire website and places the files in the public folder. We also refer to development mode as server mode or live reload mode. It listens to changes in the filesystem and rebuilds the website with the update. Hugo also supports fast rendering in development mode, which involves building only the page requested on demand. Because Hugo is blazingly fast, we don’t notice the delay in rebuilding the web page. We can disable fast rendering or live reload if it interferes with the JavaScript state by using the command-line flags \u0026ndash;disableFastRender and \u0026ndash;disableLiveReload, respectively. Note that you can run the website’s production version in development mode using the \u0026ndash;environment command-line flag. Chapter 4 discusses the difference between the various build environments.\nThere is no need to quit the Hugo development server through most of this book as it supports live reload so we can easily switch content. But you are free to abort it at any time by pressing Ctrl-C and running the hugo server command again.\nTIP The Hugo development server optimizes for refreshes with content changes. Theme changes affecting multiple files are error-prone when reloading. If you change a theme’s contents, it’s possible that caching in the browser or incrementally building with the development server will get in the way of viewing updates. Restart the dev server, clear the browser cache, and use hugo server \u0026ndash;noHTTPCache \u0026ndash;disableFastRender to help in these cases.\nWhen you run the website in development mode for the first time, the images pro- vided by the theme and its JavaScript and CSS files are optimized by Hugo and cached in the resources folder we discussed earlier in this chapter. This process may cause a slower build. It is OK to commit the resources folder to source control to prevent Hugo from generating it again.\nNOTE Most Hugo themes need some configuration and content to be func- tional. You might get a blank screen if you try replacing Eclectic with a differ- ent theme and have not provided Hugo with the appropriate configuration.\n"},{"id":17,"href":"/zh/docs/part1/chapter2/3/","title":"2.3 Adding content","section":"Chapter2","content":"2.3 Adding content\nWe will convert the empty page generated with the Eclectic theme into a fully func- tional website. This conversion includes configuring the theme by providing it with some settings and metadata, adding pages like the privacy policy and terms of use, and overriding the theme’s landing page with a custom version. NOTE Custom data for a theme is not portable. You will have to look at the theme’s documentation to figure out the theme-specific configuration. If you are still judging the theme as you develop the website, it is recommended to focus first on the standard template-based content pages (like posts) rather than the unique pages (like the landing page and Contact Us).\n2.3.1 Configuration\nThe fact that the website ran so well with two lines of code is the magic of the well- thought-out defaults in Hugo. We can do better by passing it the right options for our website. The configuration file has two distinct parts: the top-level configuration, which is common across themes, and the theme-specific params section, which differs across themes. Let’s add some data to the configuration file, config.yaml. This is needed to be successful with the Eclectic template in Hugo. These changes provide the information to fill up the menus, the footers, copyright notices, and the title and author informa- tion, per the requirements of the Eclectic theme for Acme Corporation. The updated configuration file is present in the chapter 2 resources folder that accompanies this book (\rhttps://github.com/hugoinaction/hugoinaction/tree/ chapter-02-resources/02). You do not need to understand the entire file yet. We will be working with these settings in the following chapters, where they will become clearer. Listing 2.5 shows the configuration file that we’ll use for the Acme Corpora- tion website. A typical Hugo configuration file contains:\nConfiguration options that are standard across all themes (such as the URL of the website, its name, and language) Options for specific Hugo features (like menu) Theme-specific parameters (like params) Listing 2.5 Setting up Acme Corporation’s configuration file (config.yaml) Website language.\nHugo supports multilingual websites so we should use this option when building for only one language.\n\u0026hellip;\nHugo supports multiple authors via a feature called taxonomies (discussed in section 4.4). Hugo also provides a standard way to define menus. The menu section in the con- figuration file has keys, each of which specifies a menu name. Each menu has a list of entries, which can have a unique identifier, a name to display, a URL, and a weight to sort menu items. In the configuration file, the params section is theme-specific; its contents can differ across themes.\nWe wrote the configuration file in listing 2.5 in the YAML metadata language, which we will discuss in chapter 3. It provides structured information using keys and values separated by colons. YAML is human-readable and case-sensitive, but changes in spacing can cause problems with the YAML parser.\nHugo also supports the more “spacing-friendly” TOML format. The resources with this book also contain the TOML version of the configuration file. If you use that as an alternative, config.yaml should be removed.\nNOTE Update the actual baseURL of the website instead of http://example.org/ in the configuration file before publishing. Leaving the file example.org breaks absolute links in the website.\rThe Eclectic theme allows us to provide our logo and even control the website back- ground image by placing these in the assets/image folder (not in the themes/Eclectic/ assets/image folder). We will place logo.svg and background.svg in this folder to per- sonalize the website. We will need to create this folder if it does not exist. (You may need to restart your development server for the changes to take effect.) These files are present in the code bundle for chapter 2 (\rhttps://github.com/hugoinaction/hugoinaction/ tree/chapter-02-resources/03).\nCODE CHECKPOINT\thttps://chapter-02-03.hugoinaction.com, and source code: https://github.com/hugoinaction/hugoinaction/tree/\rchapter-02-03. ↻ Restart your dev server.\rHugo standardizes some previously specified parts (like menu and title) in the config- uration file. We will cover those parts in chapter 4. Other parts (like params) are differ- ent for each theme. Even image locations like that of the logo.svg are theme-specific.\nYou can see the impact of providing the metadata on the Acme website instantly. With the configuration mentioned previously, the site should look similar to figure 2.5.\nFigure 2.5 The Acme Corporation website looks much more complete after configuring the theme. Now the main menu and the footer section added in the configuration file are available on all pages. The logo and background images are updated as soon as we place the image files. (Abstract vector created by BiZkettE1 at www.freepik.com.)\n2.3.2 Content pages\nA website’s objective is to serve content, and we have none on our beautiful website so far. The entries added at the top menu of the website link to pages that do not exist! We need to create pages on the website to make it functional. We will begin by adding content to the pages linked to in the menu in this chapter and then will format the content in chapter 3.\nWe can create content pages as text or markup files in the content folder. We can place a privacy.md file in that folder with Markdown-based content to get the https:// localhost:1313/privacy URL. Similarly, we can add the about.md, credits.md, terms.md, and contact.md pages (\rhttps://github.com/hugoinaction/hugoinaction/ tree/chapter-02-resources/04). Hugo automatically applies the theme, and the page should render as soon as you add the document. This way, we can add as many pages as we desire to generate the website’s core structure. Markdown provides a variety of formatting options that we will study in chapter 3.\n2.3.3 Index page\nThe index page (also called the home page or the landing page) is the first page of the website and is responsible for orienting the user on what to expect. Its content is unique and different than all other pages. A text-based content works well for some pages, but many websites implement custom content for the index page. Websites even have tailor-made carousels and sections with extensive imagery that would need a custom implementation. Hugo recognizes this and provides a unique template for the index page, which is called the index template. In many themes, the index template is customized in a theme-specific way, and the index page configuration is not portable across themes.\nNOTE Most Hugo themes provide a folder called exampleSite, which con- tains a starter website using that theme. This folder is extremely useful in exploring theme-specific configurations and customization options.\rHugo’s templates are HTML files, but these can be in any text-based file format (for example, JSON, XML, or even plain text), with additional template tags that partici- pate in the compilation step. For users trying to build custom Hugo templates, it is a good idea to start with the index template because it impacts only one page of the website. Hugo templates can be overridden using the layouts folder. In this chapter, we will not be using any template tags and will start with a plain HTML template that we will place as layouts/index.html. It is still a Hugo template and has access to all the variables, which are optional.\nFor Acme Corporation’s index page, we will override the theme’s index page with a custom page, hardcoded in HTML and CSS, as figure 2.6 shows. This page will con- tain the website logo, title, subtitle, a button with a call to action (telling the reader to explore more), and a footer with links to additional pages.\nIn the layouts folder, we will place a new file named index.html with custom HTML content (\rhttps://github.com/hugoinaction/hugoinaction/tree/chapter-02- resources/05). Because we are not using Hugo’s template language, we will be hard- coding all paths and using relative locations to various support-hosting locations.\nFigure 2.6 We can create a custom landing page in a Hugo website by placing a file called index.html in the layouts folder. This page overrides the home page provided by the theme. For Acme Corporation, we used a landing page with hardcoded HTML and CSS and eschewed the theme-specific features of Eclectic to create pages based on structured data.\nWe can override templates in a Hugo theme by placing an HTML template file in the layouts folder as listing 2.6 demonstrates. Doing that provides someone who under- stands HTML with a quick way to customize a website without learning Hugo. Custom HTML can be unique to a particular website. Until we use Hugo’s template language, we have to be careful with the HTML we are writing as the custom HTML page does not change automatically when the content it links to changes.\nListing 2.6 Overriding Hugo’s themes (layouts/index.html)\r\u003c!DOCTYPE html\u003e\rAcme Corporation\rRelative paths for resources. Absolute paths cause problems when we publish this code with subfolders in a hosting environment.\nAcme Corporation\rShaping the world for you to live in\rExplore\rAssets from the static folder. Assets referred to in the HTML should be provided in the static folder for correct links in the final website.\nAbout Us Privacy Policy Terms of Use Contact Us\nHardcoded menus. In plain HTML, we have to assume that the URLs of the menu entries and their names match what is specified.\nNOTE Hugo does not modify the HTML provided inside the template.\nThe plain HTML file needs images and an index file to function properly. The images in the assets folder, which we placed for the Eclectic theme, require the use of Hugo Pipes. (We will discuss Hugo Pipes in chapter 6.) For content that does not need pro- cessing, we have to use the static folder. Until we start using Hugo’s assets-processing pipeline, we will need to place a second copy of the assets in the static folder. This includes static/index.css, static/image/background.svg, static/image/logo.svg, and static/favicon.ico. These assets are provided with the chapter resources (https:// github.com/hugoinaction/hugoinaction/tree/chapter-02-resources/06).\nCODE CHECKPOINT https://chapter-02-04.hugoinaction.com, and source code: https://github.com/hugoinaction/hugoinaction/tree/chapter-02-04. ↻ Restart your dev server.\n"},{"id":18,"href":"/zh/docs/part1/chapter2/4/","title":"2.4 Continuous delivery","section":"Chapter2","content":"2.4 Continuous delivery\nA huge benefit of Hugo and the Jamstack is the ability to have low maintenance and cheap and efficient hosting readily available. We get this power through continuous delivery from the code repository. Continuous delivery is the concept of deploying the changes to our code in an ongoing manner. Good continuous delivery pipelines are automated and require minimal manual effort.\nThere are many ways to achieve continuous delivery with Hugo, such as writing a script to push our code to a storage provider like Amazon S3 or to place it with Apache/Nginx at the web server layer as with any other web stack. We will focus on the approaches most popular within the Hugo community. You can find more hosting information on the Hugo website (\rhttps://gohugo.io/hosting-and-deployment/), which maintains a running list of various popular hosting providers and scripts to set up Hugo-based hosting.\nAlthough deploying a Hugo-based website on a public cloud provides access to many other services and immense power, the simplicity of Netlify and GitHub Pages is the best approach to get started with learning Hugo. These approaches also support continuous deployment, where changes are made live as soon as we submit the code to the code repository. We will focus on Netlify and GitHub Pages as our hosting solution in this book.\nNOTE The following sections assume that the website’s source code has been uploaded to GitHub. Every code checkpoint in the book is a good time to commit changes and deploy it to get a new build.\n2.4.1 Netlify hosting\nNetlify, whose founder coined the term Jamstack, is a leading hosting service for static websites. Netlify provides deployment services with built-in support for Hugo. Netlify takes care of continuous integration and provides APIs for websites to utilize. We can connect our GitHub repository and get static hosting on Netlify (even for private repositories) for free, until we reach its bandwidth limits. Netlify provides a handy command-line tool to perform tasks without leaving the terminal. We can also offer our build instructions via a configuration file called netlify.toml. Netlify additionally supports domain purchases, DNS, and CDN management with things like custom headers.\nTIP If you use Netlify, make sure to check out the branch domain feature. Netlify builds and hosts each pull request in a different website and can main- tain different versions via branches. We’ll use this feature to host the various versions of the website that we demonstrate in this book. You can navigate to https://chapter-02-04.hugoinaction.com to see a live website with content up to this chapter so far.\nOnce we sign up for Netlify (\rhttps://app.netlify.com/signup), it provides a step-by- step wizard to host our website. If we have already pushed our website’s source code to GitHub, we can click New Site from Git as figure 2.7 shows, after signing into Netlify to begin deployment.\nThe New Site from Git button takes us to https://app.netlify.com/start, where we can connect with our hosting provider (figure 2.8). Once we select the hosting pro- vider, we need to log in and authorize Netlify to access our code repositories.\nFigure 2.7 After signing up, Netlify presents us with a screen that lists a summary of our Netlify usage and provides the means to set up a new Netlify website. We can connect to a hosting provider or upload our website directly. Connecting to a provider is recommended to get continuous deployment when pushing code.\nOnce we provide the credentials, Netlify can browse our repository list and provide all repository names in Netlify’s UI for us to select the one we want to deploy (figure 2.9). Note that Netlify does not read GitHub organizations by default, so we need to config- ure Netlify by using a link on the bottom to provide access.\nNext, we can specify the branch to build, the build command, and the output direc- tory (figure 2.10). We provide the website URL to Hugo with the command-line argu- ments hugo \u0026ndash;minify \u0026ndash;baseURL $DEPLOY_PRIME_URL. The baseURL flag overrides the setup in config.yaml with the one Netlify uses for building branches. If we use pull request previews and branch deploys, it might be better to give each deployment a proper URL. We can also specify build parameters in a file called netlify.toml (\rhttps://docs.netlify.com/configure-builds/file-based-configuration).\nNOTE To specify the exact version of Hugo, we can click the Show Advanced button when we specify the build command and then add the environment variable HUGO_VERSION with the correct value, which is the version of Hugo we want to use (for example, 0.91.2). Netlify does not guarantee setting up the latest version of Hugo if the version number is not specified. It is better to have control over the build version by providing it manually.\nFigure 2.10 Specifying the branch for continuous integration and providing the build command and the output folder to deploy our website. We can designate the Hugo version to use with advanced options by clicking the Show Advanced button.\n2.4.2 GitHub Pages\nGitHub is the Swiss army knife of development. With its extreme popularity in the developer community and its ability to have unlimited free hosting for open source code, GitHub is a perfect place to get started with static hosting. The Pages service can render static HTML from a branch or a folder in our source code repository. GitHub Actions perform continuous integration. There are multiple actions available in the GitHub Actions marketplace for Hugo. We will be using Hugo setup (https://github .com/marketplace/actions/hugo-setup) in this section.\nThe steps for hosting our Hugo-based Acme Corporation website on GitHub Pages follow. Listing 2.7 provides the code for enabling GitHub Pages.\n1 Create the GitHub Actions file at .github/workflows/gh-pages.yml, which tells GitHub the actions to take (\rhttps://github.com/hugoinaction/hugoinaction/ tree/chapter-02-resources/07). When these changes are pushed to GitHub, these actions automatically execute, creating the gh-pages branch with the compiled ver- sion of our website. 2 In the GitHub settings for the repository, enable GitHub Pages from the gh- pages branch repository (see figure 2.11). Once enabled, the URL of the web- site will be visible in the interface. 3 After deployment, change the base URL in the GitHub Actions file and in the config.yaml file from the sample value to the correct one provided in the GitHub Actions, then push it again. We can view the updates on the Actions tab on GitHub as figure 2.12 shows. An example website using GitHub Pages is hosted at https://hugoinaction.github.io/ GitHubPages/ with the source code at https://github.com/hugoinaction/GitHubPages/. We can navigate to the Actions tab in the GitHub UI to see the results of running GitHub Actions, which deploys the website.\nFigure 2.11 Options for GitHub Pages as a host for a static website. Use the Branch: gh-pages option for Hugo.\nFigure 2.12 The Actions tab on GitHub shows all executed actions. Each code push can potentially run a GitHub action.\nNow the website should be available on the web, and we should be able to navigate to the link provided by GitHub in the pages section once it goes live. GitHub provides a CDN that distributes websites across the planet and is free for a website under its quota limits (size less than 1 GB, a monthly bandwidth of 100 GBs, and around 10 builds per hour as of writing this book). This is a good place for a personal website or for test-driving the Jamstack. Many GitHub Pages document source code already on GitHub, and Hugo is one popular tool for generating that.\nEditing on the go\nThere is a popular misconception that websites built with the Jamstack architecture are difficult to edit unless you have the development environment set up. Most mod- ern Jamstack websites have a continuous environment setup, and we can push it to production with a simple check-in. This system makes Jamstack more flexible than a traditional database-based website stack. We can change not only content but also designs, configurations, and even business logic without setting up a development environment. With scaling not a concern, it is easier to edit on the Jamstack than with the traditional web stack.\nIn case of minor edits, GitHub’s web interface is a valuable tool that provides the abil- ity to edit the website from anywhere. There are applications like CodeHub, Pocket- Hub, or Working Copy (available on both mobile and tablet) to create or modify Markdown documents from a Git repository. We can make our changes anywhere we want, and the continuous integration system ensures they go live within seconds of being committed. Unlike traditional stacks, setting up the local development environ- ment for the Jamstack is much easier, and when we have to, it does not take days.\n"},{"id":19,"href":"/zh/docs/part1/chapter2/5/","title":"2.5 Meeting the goals for performance and maintainability","section":"Chapter2","content":"2.5 Meeting the goals for performance and maintainability\nHugo and the Jamstack promise solid performance and low ongoing maintenance. Both of these are not absolutes in themselves. There is a gradient: we need to choose the right balance of features, ease of development and use, maintenance, and perfor- mance to get the best benefit. A website with no images would likely be faster to load than one with hundreds of them, but that does not mean that it would be the best website for all use cases. Therefore, when analyzing performance and maintainability, we need to consider the use case.\n2.5.1Performance\nPerformance is one notable metric that Hugo’s development team uses to benchmark its builds. We should be able to get good performance for a typical use case without any significant difficulties. We are hosting all the web pages for Acme Corporation on a CDN (prerendered), and the client does not need to do much processing to display the site. While we should find the website quick to load, it is vital to get the perfor- mance as a number and tabulate that across builds to be able to compare changes and to fix regressions.\nThe standard tool for measuring performance is the Audit tool called Lighthouse (\rhttps://developers.google.com/web/tools/lighthouse/). It’s built into Google’s Chrome browser (figure 2.14). For Acme Corporation, the About page represents a regular page of the website, which we will measure for performance.\nFigure 2.14 Performance audit for the About page for Acme Corporation using the Google Chrome Lighthouse performance test.\nNOTE Chrome regularly updates the Lighthouse tool with new tests, so the measurement results might not exactly match the screenshot shown.\nIt is essential to measure the hosted site’s performance on the CDN as the develop- ment server from Hugo is not what the users get in production. It is built for develop- ment and does not provide the right results. To measure the hosted site’s performance,\n1 Go to the View \u0026gt; Developer \u0026gt; Developer Tools menu in Google Chrome to open the web inspector.\r2 Go to the Lighthouse tab and run an audit. You should be able to achieve a decent audit score for performance on most Hugo websites.\rLighthouse may suggest issues in the theme. If so, there is an option to clone the theme or to create a bug for the theme developer to fix.\n2.5.2 Maintainability\nThe maintainability of the web setup is difficult to measure directly. There is no tool to tell whether a stack is maintainable. One way to check how much effort it would take to maintain a system is to list each of its dependencies and figure out which dependencies require ongoing security updates, which need to be abandoned by the developer, or which can become difficult to update due to nested dependencies. We should also measure the effort to remove a dependency in case it is not actively main- tained. Luckily, for the Hugo-based setup we just discussed, we have few dependen- cies. In our measurement system, we can consider a rewrite, huge updates, or partial rewrites as high risks, and tweaks that do not involve many changes as medium risks. At the same time, a low risk would refer to no minimal manual intervention. Let’s try to assess this for the website we have built so far, right after the next exercise.\nOur Acme Corporation’s website created in this chapter depends on Hugo. Hugo has had breaking changes in the past releases, but most of them have been minor. We do not need to update for security fixes because it is a development-only depen- dency. This could be rated as low in an ongoing effort if we are happy with the website or as medium for an upgrade.\rThe hosting on GitHub Pages requires no ongoing effort to maintain. This is among the most critical services for developers on the internet. We can, therefore, rate both ongoing maintenance and upgrade as low. If we use Netlify, it manages the upkeep for us, and the effort there is also low. Because it is a lot less popular than GitHub, there is an inherent risk of Netlify pivoting to a new business model or shutting its doors. Migration to GitHub is easy for the type of website built here, and its overall risk is low.\rThe Eclectic theme chosen for Acme Corporation is dependent on a few JavaScript-based plugins. These plugins are stable, however, and haven’t had significant changes in years. Still, Eclectic is not heavily used, and if it gets abandoned, the team at Acme Corporation will have to pick up the task of adding fixes to support newer Hugo versions when they want to update the website. That would be a medium effort commitment (unless they want new features).\rOverall, the ongoing work to keep the website we built in this chapter alive is meager. If we need to upgrade it, the effort would be low to medium, depending on the break- ing changes in Hugo and the theme developer’s ability to adapt to those. Note that as we progress further along with this book, we will add more dependencies to our web- site, especially in part 2. This will increase the maintenance overhead. While an attempt has been made to look for dependencies that are self-contained, readers are advised to weigh the pros and cons of adding dependencies independently every time something is needed in their own projects.\n2.5.3 Choose the theme wisely\nThe performance and maintenance risks of a website depend heavily on the theme selected. If the theme is not good, Hugo’s hard work maintaining its performance will not show in your website’s build time. The main maintenance risk to a Hugo-based website is the risk of depending on a theme that stops being compatible with the newer versions of Hugo. We can continue to use the older version of Hugo and the theme indefinitely without worrying too much about security issues because the con- tent is static. But if we ever want to update Hugo and the theme is not supported any- more, we would be on our own to maintain the theme. It is a good idea to be theme agnostic, at least early on in a website project, so that if we find a problem with the theme we are using, we can move to a different one quickly.\nThemes can also be an excellent source for learning how to use Hugo best. Many developers using Hugo choose the themes as the starting point rather than the abso- lute solution. One big reason to choose Hugo is to customize everything, and forking the theme is a powerful way to perform that task. We will be moving out of the Eclectic theme into our custom theme by the end of chapter 7.\nIf we want to continue to build our website with a theme maintained by someone else, it is a good idea to investigate portability. Hugo provides standardization across themes, and switching Hugo themes is not difficult (see listing 2.8). We will be adding another theme to Acme Corporation’s website to make sure our code is portable. We provide a copy of the Universal theme for Hugo in chapter resources (\rhttps://github.com/ hugoinaction/hugoinaction/tree/chapter-02-resources/08) and also host it at github .com/hugoinaction/Universal. You can copy that theme to the themes folder and enable it with the website configuration. You may need to restart the development server.\nListing 2.8 Changing a theme to Universal (config.yaml)\rtheme: Universal\nWhile the previous code works and renders the website, there is more configuration that we need to do to get the maximum benefit of the Universal theme. For that, place logo.png in the static/image/logo.png folder and update the configuration to include the parameters in the following listing (below the existing params for footer) for Universal to be able to parse them (\rhttps://github.com/hugoinaction/hugoinaction/ tree/chapter-02-resources/09).\nThe configuration file for Universal is available in both TOML and YAML format in the code resources with this book (\rhttps://github.com/hugoinaction/hugoinaction/tree/ chapter-02-resources/10). Note that the configuration for Eclectic has not been removed, and we can switch between the two themes easily.\nCODE CHECKPOINT\thttps://chapter-02-05.hugoinaction.com, and source code: https://github.com/hugoinaction/hugoinaction/tree/chapter-02-05.\nBecause each theme has a unique home page, switching themes will be considerably easier if we choose our own customized HTML-based home page. That way, if we render now or with a live reload, the home page remains the same. Because the About page is styled, it will match the Universal theme (figure 2.15) if we switch to that theme.\nFigure 2.15 Terms of Use page for Acme Corporation in code (left), Eclectic (middle), and Universal (right). When we switch themes in Hugo, most of the content that we provide as Markdown still works. Only the parameters provided in places like the configuration file need to be reworked.\nWe will be reverting to Eclectic for the rest of the book. With a running website, it is time to add some more content, so we will do that in chapter 3.\n"},{"id":20,"href":"/zh/docs/part1/chapter2/summary/","title":"Summary","section":"Chapter2","content":"\rSummary\r#\rHugo is available for installation in most major package managers on Linux, macOS, and Windows.\nHugo has extensive command-line functionality to minimize the work that its users need to do. It has handy options that help build all parts of a website, from adding module dependencies to creating new Markdown-based documents.\nA Hugo project consists of folders beyond the content and themes folders: static for static content, data for structured data, layouts for theme overrides, resources for Hugo’s internal caching, assets for images, JavaScript, and CSS files, and public for the generated output. It also includes archetypes for posted templates and a configuration file for global settings.\nHugo themes can be added in various ways, the simplest of which is to directly copy a theme to the themes folder. We need to configure these with standard and theme-specific parameters and file placements before using.\nContent can be added as Markdown, theme-specific structured data, or in an overridden HTML template.\nHugo websites can be hosted easily across the planet via GitHub Pages and Netlify, which provide continuous delivery support without making the devel- oper do much work.\nWe can switch themes, but if we use a lot of theme-specific data (like data sup- plied via params in the configuration), then that work needs to be redone. We should investigate theme switching early on so that we can switch out quickly if the Hugo theme gets abandoned.\nWe can use Google Chrome’s Lighthouse feature for measuring performance.\nWe should also do a full dependency audit to check maintainability.\nEvery website needs to be monitored for maintainability and performance regu- larly during development to ensure quality. Hugo offers excellent performance and has a small set of dependencies, but the website performance and main- tainability still depend on the chosen theme.\n"}]