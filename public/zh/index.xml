<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo In Action</title>
    <link>https://hugo-in-action.foofun.cn/zh/</link>
    <description>Recent content on Hugo In Action</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Sep 2022 18:26:30 +0800</lastBuildDate><atom:link href="https://hugo-in-action.foofun.cn/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/summary/</guid>
      <description>总结
Jamstack是一种web开发方法，其中大多数内容与主题一起作为文件存储，并在部署过程中编译到网站中。 JAMSTACK中的静态内容是用标记语言编写的，标记语言会编译成HTML。 动态片段以通过JavaScript访问的api的形式提供。 JAMSTACK架构在成本、运营和维护方面节省了大量成本。 我们还得到一个快速的网站。 Hugo是一个帮助构建这些所谓的静态网站的框架，它提供了出色的构建性能，Hugo以单一二进制文件的形式提供。 Hugo满足了低持续维护和出色的开发人员经验的承诺，并且可以扩展到一个庞大的团队。 Hugo尤其在信息流从服务器到客户端的地方大放异彩，例如个人或公司网站、新闻帖子、博客、文档等。 对于信息流从客户端到服务器或基于用户的人化的地方，Hugo遵循Jamstack方法。 JavaScript层负责通过API与服务器进行通信。 </description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/2/</guid>
      <description>3.2Markdown in action Using all these content features, we will now update the About Us page for the Acme Corporation website to make it more presentable. Figure 3.10 shows the completed</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/3/</guid>
      <description>3.3Other markup languages Hugo natively supports Markdown and HTML for content markup. The parsers for these languages are written in Go and are embedded in Hugo, receiving the love and care from the Hugo team to ensure outstanding performance. Hugo also supports AsciiDoc, pandoc, and reStructuredText for providing content. These languages are not available natively in Hugo but instead are supported via external helpers. External helpers are software programs that Hugo calls over the command line to get some content parsed.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/4/</guid>
      <description>3.4Metadata By embellishing the raw textual data with formatting elements and structure, the pages individually look complete when rendered with the Eclectic theme, which forms the template and code associated with the Markdown data. While there is ample con- tent on the pages to form a website, we need to provide information that we can use to organize content and structure it in lists, menus, and so forth. Markdown is not the best language to offer structured data for this.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/5/</guid>
      <description>3.5Other metadata languages YAML also has the same tradeoff as Markdown: human readability over a strict specifi- cation. This tradeoff comes with complexities in parsers and weird edge cases that might not be easy to understand. We have chosen YAML in this book for the configu- ration file due to its popularity and ease of readability. Hugo supports TOML and JSON as other metadata languages apart from YAML. Appendix B goes over TOML and JSON in detail, and table 3.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/6/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/6/</guid>
      <description>3.6Front matter Apart from the global site-wide configuration, we also need page-specific metadata like creation date, tags, URLs, author name, and so forth. Hugo needs this informa- tion to organize the page in the website and to provide information about this page to the broader internet, such as search engines and social networks. We can also show some metadata in the sidebar of the page. To provide page-specific metadata, Hugo has the concept of front matter.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/7/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/7/</guid>
      <description>3.7Benefits of using markup and metadata languages In the Jamstack, we use markup and metadata languages across multiple files to replace the role of the database in the traditional web stack. The benefit of giving up on the database is not obvious when we move to the Jamstack. Databases have been optimized for over 30 years and provide vast storage optimizations and querying capabilities. Data- bases (both SQL and NoSQL) require some structure to the data they store.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/1/</guid>
      <description>4.1Customizing with the Hugo configurations On the Acme Corporation website, so far we have had only one configuration file, config.yaml, where we have been piling our configurations. If we look at the Hugo documentation, we notice that many configuration parameters can be changed, which can quickly get overwhelming. A single configuration file is bound to become a bottleneck. Another problem with our configuration file is that we cannot have different set- tings for development and production in one file.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/2/</guid>
      <description>4.2Organizing content with sections and menus The essential tool to lay out content is the desired structure of the website that we will create from it. If we can physically represent the content we want to express on the sitemap logically, it makes our lives easier. This section provides some insights on how to go about laying out your content.
4.2.1Sections When a website has a lot of content, placing all of that in top-level pages makes man- aging the content challenging.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/3/</guid>
      <description>4.3Better together with page bundles A common problem with website source code is the scattering of the content across databases, filesystems, and third-party locations. Additionally, the images associated with the page live in a different place. That makes it difficult to properly clean up after we remove a page from the website. Because pages are not portable across websites, the authors need access to multiple places to create them. Hugo, however, attempts to make the contents of a web page more self-contained.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/4/</guid>
      <description>4.4More than tags: Taxonomies To organize content into sections in Hugo, we need to physically organize the files. It is easier to have individual files for each web page neatly organized into folders and sub- folders. In many cases, the logical organization of the website matches the physical organization on the disk. That is why Hugo, by default, generates the URLs with the sec- tion name as a part of the URL.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/6/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/6/</guid>
      <description>4.6Content sharing using custom shortcodes While sharing complicated logic is one use of shortcodes, we can also use shortcodes to minimize our copy and paste efforts and to keep our content clean. Shortcodes can be as simple as snippets of HTML or even Markdown content that needs to be shared to prevent duplication. With one source of truth, managing content gets a lot easier. While creating content, if we find that we are copying and pasting some text repeat- edly, it is a good idea to wrap that text up in a shortcode, then call the shortcode to provide the content.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/1/</guid>
      <description>5.1Separating data and design To control the website’s index page with a markup document, we need to create the markup document first. The content folder is the branch bundle for the entire website. We need to place _index.md (https://github.com/hugoinaction/hugoinaction/ tree/chapter-05-resources/01) in that folder to represent the /index.html web page. Note that if we use index.md instead, the website’s root becomes a leaf bundle and will not use the template we provide in the layouts folder.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/2/</guid>
      <description>5.2Using external data to add content While we can obtain most web page data from the markup document, we can also get some of it outside the markup document. This data includes menus, other sections, and pages of the website and content generated by Hugo from the website or web page data. 5.2.1Adding the menu The links for the main pages on the home page break the independence of those pages.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/3/</guid>
      <description>5.3Playing with structured data There are two general types of data in a web page: unstructured, free-flowing text (rep- resented by a Markdown document), and structured or grouped data (represented by keys and values or rows and columns traditionally defined in a database). For example, in a shopping cart application, the product description should be unstructured, but if we put the price field in Markdown, extracting the price to show in multiple places would be tedious.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/4/</guid>
      <description>5.4Enhancing life with the Go template language We can do a lot more with the template language than just build web page templates. We can use the Go template language at various places to remove repetitive work and enhance the day-to-day workflows dealing with content. We can invent new shortcodes that enhance Markdown to provide a new feature. We can create archetypes or tem- plates for content so that when we start to write the content later, we have a page with the essential metadata prefilled.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/1/</guid>
      <description>6.1Using content types, base templates, and blocks to structure templates So far, we have focused on creating index.html for the home page using the Go tem- plate language. While we don’t have a large and unmanageable file yet, it can quickly get out of hand if we keep adding code to this file. Also, with one file, we cannot share template code between various web pages that are slightly different. In this section, we will start to build a template for accessibility beyond the index page.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/2/</guid>
      <description>6.2Reusing content with partials As we introduced new sections to our home page, it pushed the footer menu down, far away from the top of the website. While those links are not as important as the header, we would like to have them available without scrolling (commonly called above the fold, which comes from newspapers where articles hidden under the fold on the front page were considered less important). Ideally, we want to reuse the code to ren- der the footer.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/3/</guid>
      <description>6.3Asset handling with Hugo Pipes By moving HTML generation to Hugo’s template system, we have significantly eased the job of HTML generation, which we can now do based on a markup document. However, problems remain with images and other assets like JavaScript and CSS. There is a lot of work involved in changing the aspect ratios and resizing images into multiple files for thumbnail, mobile, desktop, etc., which we need to do to get good performance.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/4/</guid>
      <description>6.4Controlling Markdown rendering We also have images present in the Markdown documents, which we are not optimizing for production. These can also slow down loading the website. To control how Hugo renders content in the Markdown documents, Hugo provides hooks (called render hook templates) into the Markdown parser, where we can customize the rendering for Mark- down elements. We can override the rendering of images, links, and even headings if we want.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/5/</guid>
      <description>6.5Using bundled templates for common work From the perspective of maintenance, the best piece of code is an empty file. The sec- ond best is a well-written piece of code maintained by a trusted team of experts. Hugo comes bundled with ready-to-use templates supported by its core team and used in hundreds of themes by the community. Reusing some of this makes life as a developer a lot easier. When we added the head section of the website, we did not provide much meta- data.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/1/</guid>
      <description>7.1More ways to lay out content There are multiple types of pages in an application, each with a different look. A blog page, for example, typically has a sidebar with additional information about the blog post. Various types of pages can have different CSS styles and different HTML struc- tures to accommodate their unique design. One way to style pages differently, which we used in chapter 6, is to use a new con- tent type for each category of page created.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/2/</guid>
      <description>7.2Updating the index pages by providing content and subsection lists The index pages like /blog need to have a different interface than the regular pages. Rendering it with the blog layout renders only the Markdown content, and we lose the capability to navigate to the child pages in the section and the subsections. These pages deserve separate templates. 7.2.1Using the list template for index pages The index pages provide access to the content within a section.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/3/</guid>
      <description>7.3Providing the taxonomy pages There are two types of taxonomy pages: the taxonomy page (used for each taxonomy term) and the terms page (used for the taxonomy list). The terms pages provide a list of all the terms in the taxonomy (for example, all the tags at /tags), while the taxonomy pages list all pages with a specific term (like all posts with the tag square). Before over- riding any of the pages, let’s see how they look in the existing list template.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/4/</guid>
      <description>7.4Creating our own theme Now that we have moved the significant parts of our theme onto the modern layout, we don’t need Eclectic anymore. We can safely remove it from our codebase and move all the pages over to our custom theme.
7.4.1Moving to a new theme To move to a custom theme, we need to make sure we do not use any feature from Eclectic. We don’t want broken pages that need more work in our new theme.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/5/</guid>
      <description>7.5Powering up with content views With a theme, we get access to multiple content types. We already saw how content types can automatically map to section names. A content type also can have content views. Content views are partial layouts rendered inline in another layout. Creating these is similar to creating a layout. To understand the problem content views solve, navigate to the public category page on the Acme Corporation website (http://localhost:1313/ categories/public/).</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/1/</guid>
      <description>8.1Setting up Hugo Modules Hugo Modules have a dependency on Go. You can install Go using your package man- ager or using the instructions at https://golang.org/doc/install. Remember that Go needs to be present in the system path to be usable by Hugo. To verify if Go is available, run the command go version, which outputs the version of Go in the console. Ensure that the version of Go is greater than 1.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/12/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/12/</guid>
      <description>8.12Commonly used Hugo Modules APIs Running hugo mod provides a great variety of subcommands that are useful in manag- ing modules in our daily life. For example, hugo mod tidy—Removes unused entries from the go.sum and go.mod files (like getting rid of Eclectic). hug mod clean—Clears the module cache to pick up newer changes (if done locally). Sometimes, the local store may get corrupt, giving us incorrect data. hugo mod graph—Shows the list of dependencies of the current website or mod- ule.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/2/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/2/</guid>
      <description>8.2Themes as Hugo Modules Themes are the most common shared element across multiple websites. They are the most common use case for Hugo Modules. In section 2.2, where we introduced the concept of themes, we discussed three ways to integrate themes into a website: down- load and copy (which we have used so far), Git submodules (not recommended any- more), and Hugo Modules (which we did not use because download and copy is easier for beginners).</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/3/</guid>
      <description>8.3Importing themes Once we have enabled Hugo Modules, we can come back to config.yaml to manage it. If the theme is available as a Git repository on GitHub (as is the case with most Hugo themes), Hugo can do the job of fetching and set- ting it up for us automatically. We will be testing the waters by first import- ing Eclectic via Hugo Modules and then move to AcmeTheme after that.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/4/</guid>
      <description>8.4Enabling themes other than Eclectic Adding a theme to a Hugo website is as simple as replacing the URL in config.yaml, but this may not always work. Theme switching can fail for a couple of reasons: Some themes require unique settings in the configuration to be usable. The website may be dependent on shortcodes that are not available in a differ- ent theme. Hugo will fail to compile in case of a missing shortcode.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/5/</guid>
      <description>8.5Getting a specific version of a theme Hugo Modules has support for versions via Git tags. This allows us to link to a different version of our dependencies rather than what is the latest mainline. In many projects, mainline is under active development and unstable when a release version is marked separately. We will switch back to AcmeTheme with Hugo Modules. A copy of the AcmeTheme is on GitHub in the github.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/6/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/6/</guid>
      <description>8.6Viewing the dependencies source code By moving to Hugo Modules, we lost the ability to inspect the source code of the depen- dencies. Also, because dependencies are not a part of the website’s source code, our website will need internet access to be compiled. Internet dependency may turn out to be a limitation in certain use cases. If we archive our website for long-term storage, back- ing up a copy of the dependencies is as important as backing up the source code.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/7/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/7/</guid>
      <description>8.7Modifying dependencies locally We can change the contents of the _vendor folder and view the changes live in Hugo, but this is a bad practice. The next time we update a dependency, our changes will get overridden. Pushing every commit to the theme repository can also be tiresome. Hugo has a mechanism to provide a local version of a hosted dependency for local development. We need to set up the dependency (the AcmeTheme in this case) as a Hugo module to enable this.</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/8/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/8/</guid>
      <description>8.8Adding nested dependencies With Hugo Modules so far, we have been able to load the theme dynamically and pro- vide some level of checks (like the minimum Hugo version needed) for the theme to be used correctly. The main power of Hugo Modules is the ability for the theme to have its own dependencies, which we will use now. Because turning a theme into a Hugo module makes it possible for theme-specific dependencies, these will be pulled</description>
    </item>
    
    <item>
      <title>1.1 JamStack中的工作栈</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/9/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/9/</guid>
      <description>8.9Modules as template plugins We can share Hugo’s template code in the form of partials across multiple themes. These shared partials can act as plugins that wrap reusable functions. One module that can be useful when developing Hugo templates is the Hugo debug utilities, which provide the debug button we used with the Eclectic theme. We will add this module to the AcmeTheme module to be made available for all websites using this theme.</description>
    </item>
    
    <item>
      <title>1.10 不适合Hugo的案例</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/10/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/10/</guid>
      <description>1.10 不适合Hugo的案例
像所有工具一样，Hugo也有自己的使用场景。 除了适用于任何Jamstack框架的所有Jamstack限制之外，我们需要了解Hugo的重点仅在于Jamstack的标记部分。 虽然Hugo提供了最快的JavaScript绑定器，并对NPM生态系统有很好的支持，但它对JamStack的JavaScript和API层采取了一种不插手的方法。 如果你想构建一个需要大量JavaScript与静态页面混合的工具，或者你想拥有一个与网站模板共享代码的应用编程接口，Hugo独立于这些部分的方法是不够的。
当我们需要一些Hugo没有的功能时，Hugo可能不是最优的，而我们无法通过API实现这一点。 Hugo保持模板和模块无法访问其核心，以保持其灵活性并保持其性能不变。 对于想要构建一个定制的静态站点构建器的开发人员来说，Hugo可能不是正确的选择，因为它有很多插件来迎合不常见的用例。 例如，如果我们需要在编译时与SOAP或FTP协议进行交互，则Hugo可能无法做到这一点 (从v0.91.2开始)。</description>
    </item>
    
    <item>
      <title>1.11 如何在Hugo和这本书中取得成功</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/11/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/11/</guid>
      <description>1.11 如何在Hugo和这本书中取得成功
在本书中，我们将为领先的数字形状制造商Acme Corporation建立网站。 该网站将有常规的公司页面，支持动态评论和搜索的博客，基于JavaScript的形状编辑器，以及通过电子邮件发送的购买形状的店面。 我们将在本书中构建的网站的最终版本托管在https://chapter-13-09.hugoinaction.com/。
我们将从JAMSTACK的标记层开始，这是Hugo擅长的。 我们将讨论在Hugo网站中创建和组织基于标记的文档，如何使用这些文档来渲染网页，创建共享web模板的主题， 以及如何使用模块创建可重用的内容和模板代码。 在本书的第二部分，我们将深入研究Hugo对Jamstack的JavaScript和API部分的支持。 我们将了解如何在编译时和运行时调用API，如何构建基于JAMSTACK的简单API，以及如何使用JavaScript来增强用户体验。 我们还将编译并捆绑一个复杂的JavaScript应用程序与一个基于Hugo的网站。
要想读好这本书，你需要一台装有现代操作系统、能上网、能浏览网页的机器，以及对网络开发人员熟悉的工具和编程语言的理解。 这些包括HTML、CSS、JavaScript、Git、GitHub、任何模板引擎 (如Mustache、Jade或嵌入式Ruby (ERB))，以及可选的npm。 代码样例都可以在giHub上获得，并托管在 https://hugoinaction.com 上 我们建议使用不同文件之间的差异，以将本地所做的更改与代码示例中存在的更改进行比较。
练习1.6 Hugo在Jamstack的图层上工作。</description>
    </item>
    
    <item>
      <title>1.3 JAMSTACK中的JAM</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/3/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/3/</guid>
      <description>1.3 JAMSTACK中的JAM
Jamstack的JAM部分代表JavaScript、api和markup。让我们看一下这些组件中的每一个。
1.3.1 Java脚本
Jamstack中的JavaScript是指提供交互性和动态功能的所有客户端脚本编写方法，这些方法对用户是个性化的，不能预编译。 这使开发人员能够对用户操作做出反应，并在运行时修改用户界面。 Jamstack将JavaScript框架及其管理的细节留给了web开发人员。
在传统的堆栈中，服务器在处理用户交互方面扮演着突出的角色。 即使仅需要修改页面的一部分，它也会生成新页面。 这是不必要的，也不是最优的。 现代JavaScript完全能够将用户状态存储在浏览器中。 它可以与服务器通信并更新界面，而用户不需要重新加载或看到界面中的闪烁。 Jamstack使用JavaScript进行预抄写，以解决最佳用例-向最终用户提供交互式界面并从客户端到服务器进行通信的情况。
1.3.2 应用编程接口(API)
应用程序编程接口 (api) 为与web服务进行通信提供了定义明确的合同。 API抽象了整个服务器功能，因此客户端不需要了解服务器内部结构即可使用服务。 在Jamstack中，预编译和客户端JavaScript接管了通常在服务器上完成的许多工作，但是服务器仍然有其用例。 这些包括跨机器存储应用程序状态，需要比单台机器更多处理能力的计算，以及必须从网站浏览者传输回服务器的数据。 许多传统系统公开api与底层功能进行通信。 虽然这种方法适合JamStack定义，但JamStack建议尽量减少API的构建，以减少维护开销。 在Jamstack中，许多需要其他堆栈中api的操作处理方式不同。 你可以放置、更新或删除磁盘上的文件，而不是内容创建、更新或删除API。 只有基于网站中的用户操作 (如购买和评论) 的动态更新才需要专用的api。
有第三方API提供程序提供高级API，开发人员可以使用这些API，而无需自己构建所有东西。 从处理注释到全文搜索，无需编写cus- tom代码即可大规模使用。 当我们需要编写自定义后端时，云服务提供商让这项任务比从头开始构建更容易。 借助FaaS，云服务提供商可以接管正常运行时间，持续的安全更新以及随用户负载扩展的所有权。 服务提供商在全球范围内维护性能和可用性。 开发人员编写代码并将其交给服务提供商进行部署。 正在进行的工作微乎其微。 然后，开发人员可以努力增强功能或在功能级别更新任何依赖项。
1.3.3 Markup
标记的传统定义在文本文档中包括一组注释 (例如HTML文档中的XML标记或Markdown中的文本周围的星星)，这些注释提供了有关如何理解或呈现文本的更多信息。 JAMSTACK将整个标记文档视为标记。 它由文本数据，注释和结构化元数据组成。
标记形成了JAMSTACK的数据层。 与传统数据库不同，我们将标记存储在文本文件中。 它的原始形式是可读和可编辑的，而无需使用工具将其转换为可读格式。 标记语言提供了一种以简洁可读的方式编写格式化文档的方法。 Markdown是在JAMSTACK中编写内容的最流行的标记语言。(我们将在第3章详细研究降价。)我们用于与文档相关联的附加信息的各种元数据语言可以伴随此内容。 其中之一是YAML (Yaml不是标记语言)，我们也将在第3章中讨论。
注：超文本标记语言(HyperText Markup Language)也是一种标记语言，你可以自由选择它来将数据写入JamStack。 但是，诸如Markdown之类的人类可读语言使阅读和维护我们的数据变得更加容易。 这在呈现过程中被转换为HTML，从而将布局(模板)和表示(CSS)排除在内容之外。
使用基于标记的文档来存储数据有很多优点。 网页的大部分内容都是无结构的。 常规数据库将其保存在单个单元格中。 然而，这种方法并没有很好地利用数据库技术。 如果数据作为独立文件管理，我们可以使用像Git这样的版本控制系统来监视数据更改。 将数据与代码一起使用可以简化跨服务和构建环境的迁移。 我们可以将所有配置文件存储在一起。 优化和测试更加简单，能够创建新的构建环境(阶段、生产等)按需提供。 对于非结构化内容，数据库的大多数组织和查询功能都无济于事。 基于数据库托管博客或通用网页并不是对其资源的最佳利用。
随着Git和GitHub的普及，许多开发人员已经熟悉了标记语言，尤其是Markdown。 大多数开发人员用标记语言编写自述文件。 这些语言稳定、规范、易学、易懂。 有很多工具可以用这些语言编写或将数据迁移到这些语言。 它们还可以与diff和合并工具 (用于比较文件中的更改) 一起使用，并且大多数编程语言都具有用于解析这些lan- guage的库。 该工具为程序员以他们喜欢的方式操作数据提供了极大的灵活性。</description>
    </item>
    
    <item>
      <title>1.4 为什么使用Jamstack？</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/4/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/4/</guid>
      <description>1.4 为什么使用Jamstack？
预先构建呈现给用户的HTML内容具有独特的优势&amp;ndash;从微小的错误操作到出色的性能和成本降低。 我们将在以下各节中了解这些优点以及更多优点。
1.4.1最小操作
由于内容是在发布之前预先构建的，因此减少了站点中活动部件的数量。 服务提供商负责安全更新、硬件故障和网络问题。 云主机提供几乎100% 的正常运行时间，而无需网站所有者的任何积极参与。 无需随叫随到，无需考虑服务器、扩展、负载平衡、跨大洲的正常运行时间或任何其他运营开销。 开发人员可以专注于建筑的乐趣，而企业可以专注于其核心能力，而不是建立一个DevOps团队。
1.4.2 出色的性能
CDN完全托管作为静态网站提供的预构建HTML。 这样，每个文件都被缓存，并从地理上靠近最终用户的服务器提供服务。 没有到应用程序服务器的往返，也没有数据库查询，这可能会成为瓶颈。 大多数针对JAMSTACK的站点生成器在编译时生成HTML。 它已经可以在用户请求时呈现。 即使只有一个HTTP请求，该网站也可以正常运行。 使用Jamstack构建的简单网站可以在大多数审核中提供90% + 的性能评分。 如果开发人员在构建主题时对性能很敏感，那么基于JamStack的网站可以在这些审计中达到100%分数的所有标准。
1.4.3 降低成本
从托管堆栈中移除数据库和应用程序服务器可降低硬件成本。 随着操作变得自动，大多数DevOps需求都不存在。 所有这些都转化为显著的成本节约。 你可以使用静态网站主机 (如GitHub Pages和Netlify) 免费获得一个网站。 所有主要的云提供商，如AWS S3、谷歌云存储和Azure存储都提供低成本的静态托管。 无需拥有IT或DevOps团队来管理服务器团队。
1.4.4 开发人员工作效率
像Git这样的版本控制系统管理基于Jamstack的网站。 没有必要拥有复杂的开发环境。 在开发人员机器上运行代码只有一个命令。 大多数网站可以通过简单的推送到服务器上一天多次部署。 这些功能使开发人员有时间和灵活性专注于网站的内容。
1.4.5 长寿
HTML/CSS是构建的最稳定的技术。 今天的浏览器竭尽全力继续支持自20世纪90年代以来一直支持的所有功能。 如果你拥有一个基于Jamstack的网站，并且在互联网上消失了十年，当你回到你离开它的那个状态 (大部分) 时，它仍然会在那里。 除了静态服务器上托管的纯HTML、CSS或JavaScript之外，互联网不会宽恕任何技术堆栈。 你甚至可以在虚拟机器中继续使用静态站点生成器，而无需更新版本。 因为生成器是本地的，所以生成器中的安全漏洞不会影响网站。 你不需要上网并将这些漏洞暴露给互联网。
1.4.6 工具
由于活动部件较少，结构定义明确，Jamstack的工具比其他web堆栈更先进，功能更强大。 通过Netlify、GitHub页面等直接支持扩展，即可实现一键部署。 将整个网站作为代码存在也意味着没有什么可隐藏的。 没有复杂的安全或性能配置，堆栈中的不同层没有额外的管理开销，也没有集成开发环境(IDE)。
即时更新
对于JamStack来说，这似乎是一个限制，我们不能动态更新网站。 大多数传统系统都提供管理员模式来更新网站。 JAMSTACK没有开出任何药方。 使用Jamstack，不需要任何特殊工具来更新基于Jamstack的网站。
标记语言友好且易于使用。 我们可以在任何文本编辑器中提供更新。 大多数版本控制提供商，如GitHub、GitLab和BitBucket，都可以从浏览器提交新的更改。 持续集成可以自动构建并将其部署到生产中。 我们获得了对我们的内容拥有完整的版本控制系统的好处。 我们也可以自由选择我们的文本编辑器。 作为额外的奖励，我们可以随时随地更新主题。 文本内容，自动部署和持续集成确保我们不会错过WordPress的管理模式，但是如果需要，也可以使用管理工具。 我们将在附录C中讨论Netlify CMS。</description>
    </item>
    
    <item>
      <title>1.5 何时不使用Jamstack</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/5/</guid>
      <description>1.5 何时不使用Jamstack
JAMSTACK的一个假设是，内容在编译时可用，并且不会快速更改。 如果这个假设被证明是假的，Jamstack不会提供很多。 以下各节提供了何时不使用JAMSTACK的用例。
1.5.1 当存在无历史意义的动态数据时
如果我们正在构建一个具有不断变化的数据的仪表板类型的应用程序，那么作为一个概念，预编译不会提供很大的价值。 基于传感器的数据可以在几毫秒内改变。 在许多情况下，没有人阅读这些数据。 Jamstack不能很好地与这种类型的应用程序配合使用。 一个主要的例外是报告，其中一些数据需要保留很长时间，经常被阅读，并且很少更改(如果有的话)。 这种类型的报告是预先生成和保存的完美案例。 匆忙做这件事是没有意义的。 Jamstack完全符合报告用例。
1.5.2 基于用户生成的具有瞬时数据的内容的构建
Twitter和Facebook等网站的帖子很小，我们很少将其作为单独的页面阅读。 这些被编译成提要，每个用户的提要是不同的，并且会随着时间的推移而变化。 用户可能在任何给定时间都不会阅读提要，因此预生成可能会浪费。 这些用例不适合JamStack擅长的一次写入、多次读取的场景。 虽然理论上我们可以编译经常使用的页面，但传统的web堆栈也可以做到这一点。 这里需要记住的一件事是，如果数据具有永久性价值，故事就会发生很大变化。 如果我们有用户生成的博客文章、产品页面或文章，这些文章写了一次，读了很多次，这又回到了Jamstack擅长的写一次，读了很多次用例。
1.5.3 具有特定于用户的网页
在一些网站上，开发人员为用户个性化每个页面。 此数据不同，因为它基于用户ID。 因此，预编译可能没有意义。 大多数用户可能无法登录。 无法公开访问可能导致负载增加的机器人。 数据的多次读取和一次写入的整个概念是错误的。 一个例子是日历应用程序。 因为每个用户的cal-Endar是不同的，所以预先生成每个人的日程表是没有意义的。
1.5.4当没有数据要编译时
Web应用程序是用户既是创建者又是消费者的网站。 对于文档编辑器 (例如Google Docs)，没有数据可以显示。 在这些情况下，JAMSTACK方法没有帮助。
请注意，Jamstack在以前的所有情况下都有助于构建网站的静态部分。 其中包括隐私政策页面和使用条款页面。 即使是关于我们的页面和公司博客也可以使用果酱堆栈进行最佳构建。 这些页面可以使用JamStack方法设置，而不同的堆栈可以为网站或Web应用程序的其余部分提供服务。
锻炼1.3 以下列表中的哪个网站最适合使用JamStack构建？ A.搜索引擎 B.购物网站 c.社交网络 D.图像编辑器</description>
    </item>
    
    <item>
      <title>1.6 选择构建器</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/6/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/6/</guid>
      <description>1.6 选择构建器
JAMSTACK没有规定一种特定的技术。 开发人员可以自由选择自己喜欢的技术来构建网站。 有大量具有各种权衡的静态站点构建者。 这些是用不同的编程语言制作的，提供集成，并支持许多插件。
Jekyll是用Ruby构建的，是一个流行的静态站点构建器，可以与GitHub页面无缝集成。 GitHub可以从repository自动部署基于Jekyll的网站，而无需编写自定义构建步骤。 许多Hugo用户从Jekyll开始他们的旅程，并转移到Hugo以寻求更好的构建性能。
Hugo是拥有深度功能集的最快静态站点生成器之一。 雨果的开发团队一直专注于构建一个系统，该系统可以在不到一秒的时间内呈现一个拥有数百个页面的复杂网站。 雨果 (Hugo) 用Go (Golang) 编写，是包含所有电池的单个二进制文件。 由于没有插件，核心团队已经将其大部分功能标准化。 这种标准化允许以大量关注可维护性和性能的思想构建元素。 它的模板语言是一种完全的编程语言，我们可以用它来创建任何东西。 文档维护良好，社区活跃在论坛中。 许多拥有数百万月度用户的热门网站都有雨果作为他们的发电机。 雨果的核心是稳定的，虽然它确实快速发展，但它与旧版本具有兼容性。
Gatsby、Nuxt和Next.js等一批流行的基于JavaScript框架的静态站点构建器应运而生。 这些迫使你遵循他们对如何编写和使用JavaScript的选择。 像Next.js这样的框架包括构建API后端的功能。 如果你希望开发一个JavaScript繁重的应用程序并同意这些框架做出的决定，那么这些可能是不错的选择。 由于JavaScript生态系统的性质，以及这些框架存在的时间相对较短，预计会有一些波动。
还有另一组静态站点构建器，例如Python中的Pelican和Rust中的mdBook。 它们在功能集和受欢迎程度上要小得多。 如果你与一种语言绑定并且想要编写自定义功能，请使用这些功能。</description>
    </item>
    
    <item>
      <title>1.8 速度真的很重要吗？</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/8/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/8/</guid>
      <description>1.8 速度真的很重要吗？
我们不能足够强调构建性能的重要性。 Hugo使用了许多技术来加快构建时间，比如拥有一个支持所有层缓存的多线程核心，以防止尽可能多的返工。 速度自由将开发人员从每次小的更改后等待构建完成的负担中解放出来。
如果你在watch模式下启动Hugo(一种特殊的开发模式)，网站在不到一秒的时间内就会出现。 它会重新加载你的编辑，而无需完成为实时重新加载设置花式热模块替换的整个步骤。 这个功能不仅是针对主题的，也是针对整个网站的！ 我们可以在5分钟内编辑网站，这可能是我们在其他琐事之间进行的。 在其他框架中，准备工作本身就是一项任务。
因为你无需在更改后重新编译站点，所以开发人员可以进行更改或进行实验并快速查看结果。 数据输入也是如此。 静态站点构建器和缓慢构建时间的一个重大负担是，提交数据是内容编写者需要计划的事情，因为启动和运行本身可能需要时间。 WordPress的灵活性和JamStack的性能是雨果这样的框架所无法比拟的。
随着Hugo核心的性能和所有原语的曝光，作为一名开发人员，你开始重新思考你的网站建设策略。 这段代码是否需要进入必须在访问此页面的10亿客户计算机中的每一台计算机上运行的JavaScript中，或者我们是否可以编写此代码，以便它运行一次并将结果保存为SVG或预计算
HTML，这样我们的客户就不必重新执行了？ 在构建过程中，这些微小的调整对提高网站的性能大有裨益。
锻炼1.4
Hugo是使用哪种编程语言构建的？</description>
    </item>
    
    <item>
      <title>1.9 我们可以用Hugo建造什么？</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/9/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter1/9/</guid>
      <description>1.9 我们可以用Hugo建造什么？
JAMSTACK是一个多用途的概念，我们可以将其应用于各种问题。 Hugo凭借其处理规模的能力，一直是Jamstack成功的典范。 当信息从服务器流向客户端时，Hugo大放异彩，这样用户就可以专注于消费而不是创造。 这种方法符合发布的传统定义，在该定义中，内容创建者通过web等媒介向消费者提供内容。 以下几节将向我们介绍雨果擅长的东西。
1.9.1个人网站和博客
Hugo非常适合建立和运营个人网站。 个人网站的大目标是低维护、低成本和展示你品味的灵活性。 在这本书中，你将看到我们如何在几乎没有监督的情况下构建一些东西，几乎是免费的托管，并且有足够的灵活性来定制你想要的东西。 你将获得出色的性能，能够在所需的时间和地点进行更新，全面的SEO支持以及快速入门。
你可以选择任何公开可用的Hugo主题来开始，并在几分钟内启动并运行一个像样的网站。(你会惊讶于无需任何定制即可使用的功能如此之多。)一旦有，它是直接的分叉主题，并开始定制它，以留下你独特的印象在互联网上。
1.9.2 非技术性商业网站
Hugo可以扩展到并行更新内容的团队，没有任何问题。 核心竞争力不包括建设网站的企业需要一些易于维护、成本低、性能突出的东西。 他们还想要灵活性和控制力。 Hugo勾选了所有这些盒子。 它是经过深思熟虑的，对于任何供应商团队来说都很容易理解。 Hugo很少提供开发人员可以编写有害代码以减慢网站速度的地方。 整个机制足够灵活，可以立即添加业务所需的一个定制页面，而不需要遍历和撕毁整个网站。
借助Jamstack的JavaScript和API层，你可以扩展Hugo网站，为动态网站动态更新提供保留的功能。 在本书中，你将看到我们如何构建低成本、低维护的功能，如购物车，同时静态管理网站的其余部分。
如何成功与Hugo和这本书
1.9.3 文档网站
Hugo非常支持从CSV或JSON文件中读取结构化数据，然后从这些文件中创建网站，你仍然可以应用自定义主题! 它内置了对语法突出显示的支持，可以快速扩展到大量页面。 这些使得它非常适合编写自定义网站，这些网站可以从API文档中读取，并根据规范准备格式整齐的版本。
1.9.4基于JamStack的混合网站
所有网站都有显示内容的页面。 例如，这些页面包括隐私政策、关于我们的通用页面、博客、产品列表页面和公司发布新闻声明的新闻编辑室。 Hugo和Jamstack可以帮助保持内容以低成本运行，并具有高可用性和良好的性能。 基于服务器技术的页面可以单独交付，也可以内置在Java脚本中，使用服务器公开的API与服务器进行通信。
锻炼1.5
是非判断：基于Hugo的网站需要在本地提供完整的设置才能编写内容。</description>
    </item>
    
    <item>
      <title>3.1Writing content in Markdown</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/1/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/1/</guid>
      <description>3.1Writing content in Markdown So far, we have used plain text to provide content for our web pages. With plain text, however, we get no structure, and a blob of text is not fun to read. Markdown is a light- weight document format for writing easy-to-read and easy-to-write documents with support for basic formatting and for structuring content using text-based constructs. In 2004, John Gruber and Aaron Swartz created Markdown as a human-readable, text- based formatting language.</description>
    </item>
    
    <item>
      <title>4.5 YouTube, Gists, and other snippets via shortcodes</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/5/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/5/</guid>
      <description>4.5 YouTube, Gists, and other snippets via shortcodes#As powerful as Markdown is, it does not have all the possible features that we might require in our content pages. Elements like those required for YouTube videos, GitHub Gists, Tweets, etc., are not a part of plain Markdown. While we can add these as HTML, Hugo provides a better, cleaner solution—shortcodes. Shortcodes are snippets of templates that we can include in the content files.</description>
    </item>
    
    <item>
      <title>8.10 Shared dependencies across the theme and website</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/10/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/10/</guid>
      <description>8.10 Shared dependencies across the theme and website
We copied over the partial and shortcodes into the Acme Corporation website from the AcmeTheme module to be portable across themes. That led to duplication of con- tent, which makes it difficult to maintain. We can potentially remove the shortcodes from the theme, but the partials are needed for both the theme and for the website to function. They need to live in the theme, so that it is reusable across websites, and in the website, so we can switch themes.</description>
    </item>
    
    <item>
      <title>8.11 Content plugins</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/11/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/11/</guid>
      <description>8.11 Content plugins
Template plugins are useful abstractions over template code that we can reuse. Hugo Modules also allows us to have content plugins that can package content that we can reuse across multiple websites.
One example of content shareable across numerous websites is the Terms of Use and the Privacy Policy pages. Websites from the same company share the same Terms of Use page. We can move this page to an independent module and import it across all company websites for reuse.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter3/summary/</guid>
      <description>Summary#Markdown has all the features that we need for formatting regular web pages and blog posts. Markdown supports block elements like headings, various types of lists, and sublists. We can provide inline images, links, basic formatting, and code blocks to Markdown-based content using text-based constructs. GitHub Flavored Markdown (GFM) is supported by Hugo, which adds task lists and tables to Markdown. Hugo’s rendering engine also supports features like emoticons, automatic frac- tions, and definition lists.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter4/summary/</guid>
      <description>Summary#Hugo offers the flexibility to override global configuration variables and to manage them via multiple files and in various environments. By moving config- uration from a single file to a folder, we can choose options based on numerous conditions. We can organize web pages in Hugo into sections by placing the corresponding markup content into folders. These sections can be nested and typically match the URL scheme for the website.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter5/summary/</guid>
      <description>Summary#The Go template language has full support for variables, functions, condition- als, and loops. We can use variables to access the site and page metadata, including informa- tion like menus and all the pages in the website. Hugo can get structured metadata from the front matter as well as from files on disk. Structured data allows for easier use of individual values as variables. We can use the Go template language in shortcodes programmatically to create new features for Markdown.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter6/summary/</guid>
      <description>Summary#Content types in Hugo provide the means to write different, potentially inde- pendent templates for different types of content. Hugo automatically maps the section name of the branch bundle to the content type. We can use the base template and code blocks in Hugo to share common snip- pets of the Go template language via an inheritance mechanism. The base tem- plate provides snippets of default code that we can override in the specific templates.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter7/summary/</guid>
      <description>Summary#We can use layouts to order different content within the same content type. The cascade option in the front matter allows us to share front matter proper- ties with all pages in a branch bundle. The templates single.html and list.html are essential in completing a Hugo theme. They correspond to leaf bundles (or individual pages) and branch bun- dles, respectively. The index.html, taxonomy.html, and terms.html files default to list.</description>
    </item>
    
    <item>
      <title>总结</title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/summary/</link>
      <pubDate>Mon, 12 Sep 2022 18:26:30 +0800</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter8/summary/</guid>
      <description>Summary#Hugo Modules is a powerful way to manage dependencies. We can mount any folder in any Git repository at any location in our project, even if the source repository knows nothing about Hugo or Hugo Modules. Hugo provides the means to manage dependencies in whatever approach we desire. We can keep dependencies in the vendor folder, download them on the fly from a link, or have a local copy on disk.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter2/summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hugo-in-action.foofun.cn/zh/docs/part1/chapter2/summary/</guid>
      <description>Summary#Hugo is available for installation in most major package managers on Linux, macOS, and Windows.
Hugo has extensive command-line functionality to minimize the work that its users need to do. It has handy options that help build all parts of a website, from adding module dependencies to creating new Markdown-based documents.
A Hugo project consists of folders beyond the content and themes folders: static for static content, data for structured data, layouts for theme overrides, resources for Hugo’s internal caching, assets for images, JavaScript, and CSS files, and public for the generated output.</description>
    </item>
    
  </channel>
</rss>
